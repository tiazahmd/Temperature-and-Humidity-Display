
TempHumidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c34  08004c34  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c3c  08004c3c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000078  08004cbc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08004cbc  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213f  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00030ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002264a  00000000  00000000  00032580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b36e  00000000  00000000  00054bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb791  00000000  00000000  0005ff38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b6c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  0012b744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043b4 	.word	0x080043b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080043b4 	.word	0x080043b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <main>:
DHT_DataTypedef DHT11_Data;
float temperature, humidity;
uint32_t int_temp, int_hum, int_temp_f;

int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
	char temp_str[4];
	char hum_str[3];

	HAL_Init();
 8000d52:	f001 f8ab 	bl	8001eac <HAL_Init>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <main+0x224>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a84      	ldr	r2, [pc, #528]	; (8000f70 <main+0x224>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b82      	ldr	r3, [pc, #520]	; (8000f70 <main+0x224>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

	SystemClock_Config();
 8000d72:	f000 f91f 	bl	8000fb4 <SystemClock_Config>

	MX_TIM1_Init();
 8000d76:	f000 f987 	bl	8001088 <MX_TIM1_Init>
	I2C1_Init();
 8000d7a:	f000 f9d5 	bl	8001128 <I2C1_Init>

	uint8_t res = SSD1306_Init();
 8000d7e:	f000 fbc5 	bl	800150c <SSD1306_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
	printf("OLED init: %d\n", res);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	487a      	ldr	r0, [pc, #488]	; (8000f74 <main+0x228>)
 8000d8c:	f002 fc2e 	bl	80035ec <iprintf>
	SSD1306_GotoXY(10,27);
 8000d90:	211b      	movs	r1, #27
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 fd32 	bl	80017fc <SSD1306_GotoXY>
	SSD1306_Puts("OLED inited", &Font_7x10, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4977      	ldr	r1, [pc, #476]	; (8000f78 <main+0x22c>)
 8000d9c:	4877      	ldr	r0, [pc, #476]	; (8000f7c <main+0x230>)
 8000d9e:	f000 fdc3 	bl	8001928 <SSD1306_Puts>
	SSD1306_GotoXY(10,52);
 8000da2:	2134      	movs	r1, #52	; 0x34
 8000da4:	200a      	movs	r0, #10
 8000da6:	f000 fd29 	bl	80017fc <SSD1306_GotoXY>
	SSD1306_Puts("Imtiaz Ahmed", &Font_7x10, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	4972      	ldr	r1, [pc, #456]	; (8000f78 <main+0x22c>)
 8000dae:	4874      	ldr	r0, [pc, #464]	; (8000f80 <main+0x234>)
 8000db0:	f000 fdba 	bl	8001928 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000db4:	f000 fc76 	bl	80016a4 <SSD1306_UpdateScreen>
	HAL_Delay(300);
 8000db8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dbc:	f001 f8e8 	bl	8001f90 <HAL_Delay>


	while (1) {
		DHT_GetData(&DHT11_Data);
 8000dc0:	4870      	ldr	r0, [pc, #448]	; (8000f84 <main+0x238>)
 8000dc2:	f000 fb45 	bl	8001450 <DHT_GetData>
		temperature = DHT11_Data.temperature;
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <main+0x238>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6f      	ldr	r2, [pc, #444]	; (8000f88 <main+0x23c>)
 8000dcc:	6013      	str	r3, [r2, #0]
		humidity = DHT11_Data.humidity;
 8000dce:	4b6d      	ldr	r3, [pc, #436]	; (8000f84 <main+0x238>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a6e      	ldr	r2, [pc, #440]	; (8000f8c <main+0x240>)
 8000dd4:	6013      	str	r3, [r2, #0]

		int_temp = (uint32_t) temperature;
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <main+0x23c>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de0:	ee17 2a90 	vmov	r2, s15
 8000de4:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <main+0x244>)
 8000de6:	601a      	str	r2, [r3, #0]
		int_hum = (uint32_t) humidity;
 8000de8:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <main+0x240>)
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df2:	ee17 2a90 	vmov	r2, s15
 8000df6:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <main+0x248>)
 8000df8:	601a      	str	r2, [r3, #0]
		int_temp_f = ctof(int_temp);
 8000dfa:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x244>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f9e2 	bl	80011c8 <ctof>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b64      	ldr	r3, [pc, #400]	; (8000f98 <main+0x24c>)
 8000e08:	601a      	str	r2, [r3, #0]

		if (int_temp_f < 100) {
 8000e0a:	4b63      	ldr	r3, [pc, #396]	; (8000f98 <main+0x24c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b63      	cmp	r3, #99	; 0x63
 8000e10:	d81d      	bhi.n	8000e4e <main+0x102>
			temp_str[0] = ' ';
 8000e12:	2320      	movs	r3, #32
 8000e14:	723b      	strb	r3, [r7, #8]
			temp_str[1] = (int_temp_f / 10) + '0';
 8000e16:	4b60      	ldr	r3, [pc, #384]	; (8000f98 <main+0x24c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a60      	ldr	r2, [pc, #384]	; (8000f9c <main+0x250>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3330      	adds	r3, #48	; 0x30
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	727b      	strb	r3, [r7, #9]
			temp_str[2] = (int_temp_f % 10) + '0';
 8000e2a:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <main+0x24c>)
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <main+0x250>)
 8000e30:	fba3 2301 	umull	r2, r3, r3, r1
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1aca      	subs	r2, r1, r3
 8000e40:	b2d3      	uxtb	r3, r2
 8000e42:	3330      	adds	r3, #48	; 0x30
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	72bb      	strb	r3, [r7, #10]
			temp_str[3] = '\0';
 8000e48:	2300      	movs	r3, #0
 8000e4a:	72fb      	strb	r3, [r7, #11]
 8000e4c:	e02d      	b.n	8000eaa <main+0x15e>
		} else {
			temp_str[0] = (int_temp_f / 100) + '0';
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <main+0x24c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a53      	ldr	r2, [pc, #332]	; (8000fa0 <main+0x254>)
 8000e54:	fba2 2303 	umull	r2, r3, r2, r3
 8000e58:	095b      	lsrs	r3, r3, #5
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	3330      	adds	r3, #48	; 0x30
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	723b      	strb	r3, [r7, #8]
			temp_str[1] = ((int_temp_f / 10) % 10) + '0';
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <main+0x24c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a4d      	ldr	r2, [pc, #308]	; (8000f9c <main+0x250>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	08d9      	lsrs	r1, r3, #3
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <main+0x250>)
 8000e70:	fba3 2301 	umull	r2, r3, r3, r1
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1aca      	subs	r2, r1, r3
 8000e80:	b2d3      	uxtb	r3, r2
 8000e82:	3330      	adds	r3, #48	; 0x30
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	727b      	strb	r3, [r7, #9]
			temp_str[2] = (int_temp_f % 10) + '0';
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <main+0x24c>)
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <main+0x250>)
 8000e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	1aca      	subs	r2, r1, r3
 8000e9e:	b2d3      	uxtb	r3, r2
 8000ea0:	3330      	adds	r3, #48	; 0x30
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	72bb      	strb	r3, [r7, #10]
			temp_str[3] = '\0';
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	72fb      	strb	r3, [r7, #11]
		}

		hum_str[0] = (int_hum / 10) + '0';
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <main+0x248>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3b      	ldr	r2, [pc, #236]	; (8000f9c <main+0x250>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	713b      	strb	r3, [r7, #4]
		hum_str[1] = (int_hum % 10) + '0';
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <main+0x248>)
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <main+0x250>)
 8000ec4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1aca      	subs	r2, r1, r3
 8000ed4:	b2d3      	uxtb	r3, r2
 8000ed6:	3330      	adds	r3, #48	; 0x30
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	717b      	strb	r3, [r7, #5]
		hum_str[2] = '\0';
 8000edc:	2300      	movs	r3, #0
 8000ede:	71bb      	strb	r3, [r7, #6]

		SSD1306_Fill(0);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 fc13 	bl	800170c <SSD1306_Fill>
		SSD1306_GotoXY(10, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 fc87 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts("Temp & Hum", &Font_7x10, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4921      	ldr	r1, [pc, #132]	; (8000f78 <main+0x22c>)
 8000ef2:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <main+0x258>)
 8000ef4:	f000 fd18 	bl	8001928 <SSD1306_Puts>
		SSD1306_GotoXY(10, 20);
 8000ef8:	2114      	movs	r1, #20
 8000efa:	200a      	movs	r0, #10
 8000efc:	f000 fc7e 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts("Temp: ", &Font_7x10, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	491d      	ldr	r1, [pc, #116]	; (8000f78 <main+0x22c>)
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <main+0x25c>)
 8000f06:	f000 fd0f 	bl	8001928 <SSD1306_Puts>
		SSD1306_GotoXY(50, 20);
 8000f0a:	2114      	movs	r1, #20
 8000f0c:	2032      	movs	r0, #50	; 0x32
 8000f0e:	f000 fc75 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts((char *) temp_str, &Font_7x10, 1);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2201      	movs	r2, #1
 8000f18:	4917      	ldr	r1, [pc, #92]	; (8000f78 <main+0x22c>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fd04 	bl	8001928 <SSD1306_Puts>
		SSD1306_GotoXY(10, 40);
 8000f20:	2128      	movs	r1, #40	; 0x28
 8000f22:	200a      	movs	r0, #10
 8000f24:	f000 fc6a 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts("Hum: ", &Font_7x10, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4913      	ldr	r1, [pc, #76]	; (8000f78 <main+0x22c>)
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <main+0x260>)
 8000f2e:	f000 fcfb 	bl	8001928 <SSD1306_Puts>
		SSD1306_GotoXY(50, 40);
 8000f32:	2128      	movs	r1, #40	; 0x28
 8000f34:	2032      	movs	r0, #50	; 0x32
 8000f36:	f000 fc61 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts((char *) hum_str, &Font_7x10, 1);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <main+0x22c>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fcf1 	bl	8001928 <SSD1306_Puts>
		SSD1306_GotoXY(65, 40);
 8000f46:	2128      	movs	r1, #40	; 0x28
 8000f48:	2041      	movs	r0, #65	; 0x41
 8000f4a:	f000 fc57 	bl	80017fc <SSD1306_GotoXY>
		SSD1306_Puts("%", &Font_7x10, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4909      	ldr	r1, [pc, #36]	; (8000f78 <main+0x22c>)
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <main+0x264>)
 8000f54:	f000 fce8 	bl	8001928 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000f58:	f000 fba4 	bl	80016a4 <SSD1306_UpdateScreen>
		HAL_Delay(300);
 8000f5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f60:	f001 f816 	bl	8001f90 <HAL_Delay>

		HAL_Delay(3000);
 8000f64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f68:	f001 f812 	bl	8001f90 <HAL_Delay>
		DHT_GetData(&DHT11_Data);
 8000f6c:	e728      	b.n	8000dc0 <main+0x74>
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	080043cc 	.word	0x080043cc
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	080043dc 	.word	0x080043dc
 8000f80:	080043e8 	.word	0x080043e8
 8000f84:	200004c4 	.word	0x200004c4
 8000f88:	200004b8 	.word	0x200004b8
 8000f8c:	200004bc 	.word	0x200004bc
 8000f90:	200004b0 	.word	0x200004b0
 8000f94:	200004c0 	.word	0x200004c0
 8000f98:	200004b4 	.word	0x200004b4
 8000f9c:	cccccccd 	.word	0xcccccccd
 8000fa0:	51eb851f 	.word	0x51eb851f
 8000fa4:	080043f8 	.word	0x080043f8
 8000fa8:	08004404 	.word	0x08004404
 8000fac:	0800440c 	.word	0x0800440c
 8000fb0:	08004414 	.word	0x08004414

08000fb4 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fb0a 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <SystemClock_Config+0xcc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001028:	2332      	movs	r3, #50	; 0x32
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102c:	2304      	movs	r3, #4
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001030:	2307      	movs	r3, #7
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fbbf 	bl	80027bc <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001044:	f000 f8e6 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fe18 	bl	8002c9c <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001072:	f000 f8cf 	bl	8001214 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_TIM1_Init+0x98>)
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <MX_TIM1_Init+0x9c>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_TIM1_Init+0x98>)
 80010ac:	2218      	movs	r2, #24
 80010ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_TIM1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_TIM1_Init+0x98>)
 80010b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_TIM1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_TIM1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_TIM1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <MX_TIM1_Init+0x98>)
 80010d2:	f001 ffc1 	bl	8003058 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010dc:	f000 f89a 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_TIM1_Init+0x98>)
 80010ee:	f001 ffde 	bl	80030ae <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010f8:	f000 f88c 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM1_Init+0x98>)
 800110a:	f002 f9c1 	bl	8003490 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001114:	f000 f87e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200004cc 	.word	0x200004cc
 8001124:	40010000 	.word	0x40010000

08001128 <I2C1_Init>:

/* USER CODE BEGIN 4 */
static void I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09c      	sub	sp, #112	; 0x70
 800112c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <I2C1_Init+0x8c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <I2C1_Init+0x8c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <I2C1_Init+0x8c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_B;

	GPIO_B.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 800114a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_B.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_B.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
	GPIO_B.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	66bb      	str	r3, [r7, #104]	; 0x68
	GPIO_B.Alternate = GPIO_AF4_I2C1;
 800115c:	2304      	movs	r3, #4
 800115e:	66fb      	str	r3, [r7, #108]	; 0x6c

	HAL_GPIO_Init(GPIOB, &GPIO_B);
 8001160:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001164:	4619      	mov	r1, r3
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <I2C1_Init+0x90>)
 8001168:	f001 f81a 	bl	80021a0 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <I2C1_Init+0x8c>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <I2C1_Init+0x8c>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <I2C1_Init+0x8c>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

	I2C_HandleTypeDef hi2c1;

	hi2c1.Instance = I2C1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <I2C1_Init+0x94>)
 800118a:	60bb      	str	r3, [r7, #8]
	hi2c1.Init.ClockSpeed = 400000;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <I2C1_Init+0x98>)
 800118e:	60fb      	str	r3, [r7, #12]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001194:	613b      	str	r3, [r7, #16]
	hi2c1.Init.OwnAddress1 = 0x15;
 8001196:	2315      	movs	r3, #21
 8001198:	617b      	str	r3, [r7, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_I2C_Init(&hi2c1);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f9c6 	bl	8002538 <HAL_I2C_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3770      	adds	r7, #112	; 0x70
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40005400 	.word	0x40005400
 80011c0:	00061a80 	.word	0x00061a80
 80011c4:	00000000 	.word	0x00000000

080011c8 <ctof>:

static uint32_t ctof(uint32_t cel)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	return ((cel * 1.80) + 32);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f98f 	bl	80004f4 <__aeabi_ui2d>
 80011d6:	a30d      	add	r3, pc, #52	; (adr r3, 800120c <ctof+0x44>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa04 	bl	80005e8 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4618      	mov	r0, r3
 80011e6:	4621      	mov	r1, r4
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <ctof+0x40>)
 80011ee:	f7ff f845 	bl	800027c <__adddf3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f7ff fc07 	bl	8000a0c <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	40400000 	.word	0x40400000
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	3ffccccc 	.word	0x3ffccccc

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <US_Delay_Init>:

uint8_t rh_byte1, rh_byte2, temp_byte1, temp_byte2;
uint16_t checksum; uint8_t response = 0;

uint32_t US_Delay_Init(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~(CoreDebug_DEMCR_TRCENA_Msk);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <US_Delay_Init+0x58>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <US_Delay_Init+0x58>)
 800122e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001232:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <US_Delay_Init+0x58>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <US_Delay_Init+0x58>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123e:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~(DWT_CTRL_CYCCNTENA_Msk);
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <US_Delay_Init+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <US_Delay_Init+0x5c>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <US_Delay_Init+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <US_Delay_Init+0x5c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <US_Delay_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]

	__ASM volatile ("NOP");
 800125e:	bf00      	nop
	__ASM volatile ("NOP");
 8001260:	bf00      	nop
	__ASM volatile ("NOP");
 8001262:	bf00      	nop

	if (DWT->CYCCNT) return 0;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <US_Delay_Init+0x5c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <US_Delay_Init+0x4c>
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <US_Delay_Init+0x4e>
	else return 1;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000edf0 	.word	0xe000edf0
 8001280:	e0001000 	.word	0xe0001000

08001284 <US_Delay>:


__STATIC_INLINE void US_Delay(uint32_t microseconds)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <US_Delay+0x3c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]

	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001292:	f001 fec1 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8001296:	4602      	mov	r2, r0
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <US_Delay+0x40>)
 800129a:	fba3 2302 	umull	r2, r3, r3, r2
 800129e:	0c9a      	lsrs	r2, r3, #18
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	607b      	str	r3, [r7, #4]

	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80012a8:	bf00      	nop
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <US_Delay+0x3c>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f8      	bhi.n	80012aa <US_Delay+0x26>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	e0001000 	.word	0xe0001000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_A;
	GPIO_A.Pin = DHT11_GPIO_PIN;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
	GPIO_A.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
	GPIO_A.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_A);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 ff5a 	bl	80021a0 <HAL_GPIO_Init>
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_A;
	GPIO_A.Pin = DHT11_GPIO_PIN;
 8001300:	2302      	movs	r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
	GPIO_A.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
	GPIO_A.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_A);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 ff44 	bl	80021a0 <HAL_GPIO_Init>
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <DHT_Start>:

void DHT_Start(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	US_Delay_Init();
 8001324:	f7ff ff7e 	bl	8001224 <US_Delay_Init>
	Set_Pin_Output(DHT11_GPIO_PORT, DHT11_GPIO_PIN);
 8001328:	2102      	movs	r1, #2
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <DHT_Start+0x40>)
 800132c:	f7ff ffcc 	bl	80012c8 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <DHT_Start+0x40>)
 8001336:	f001 f8e5 	bl	8002504 <HAL_GPIO_WritePin>

	US_Delay(18000);
 800133a:	f244 6050 	movw	r0, #18000	; 0x4650
 800133e:	f7ff ffa1 	bl	8001284 <US_Delay>

	HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <DHT_Start+0x40>)
 8001348:	f001 f8dc 	bl	8002504 <HAL_GPIO_WritePin>
	US_Delay(30);
 800134c:	201e      	movs	r0, #30
 800134e:	f7ff ff99 	bl	8001284 <US_Delay>
	Set_Pin_Input(DHT11_GPIO_PORT, DHT11_GPIO_PIN);
 8001352:	2102      	movs	r1, #2
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DHT_Start+0x40>)
 8001356:	f7ff ffcd 	bl	80012f4 <Set_Pin_Input>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020000 	.word	0x40020000

08001364 <DHT_Check_Response>:

uint8_t DHT_Check_Response(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t dht_response = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]
	US_Delay(40);
 800136e:	2028      	movs	r0, #40	; 0x28
 8001370:	f7ff ff88 	bl	8001284 <US_Delay>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))) {
 8001374:	2102      	movs	r1, #2
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <DHT_Check_Response+0x58>)
 8001378:	f001 f8ac 	bl	80024d4 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10e      	bne.n	80013a0 <DHT_Check_Response+0x3c>
		US_Delay(80);
 8001382:	2050      	movs	r0, #80	; 0x50
 8001384:	f7ff ff7e 	bl	8001284 <US_Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))) dht_response = 1;
 8001388:	2102      	movs	r1, #2
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <DHT_Check_Response+0x58>)
 800138c:	f001 f8a2 	bl	80024d4 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <DHT_Check_Response+0x38>
 8001396:	2301      	movs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e001      	b.n	80013a0 <DHT_Check_Response+0x3c>
		else dht_response = -1;
 800139c:	23ff      	movs	r3, #255	; 0xff
 800139e:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN)));
 80013a0:	bf00      	nop
 80013a2:	2102      	movs	r1, #2
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <DHT_Check_Response+0x58>)
 80013a6:	f001 f895 	bl	80024d4 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f8      	bne.n	80013a2 <DHT_Check_Response+0x3e>

	return dht_response;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020000 	.word	0x40020000

080013c0 <DHT_Read>:

uint8_t DHT_Read(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint8_t i, data;
	for (i = 0; i < 8; i++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	e037      	b.n	800143c <DHT_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN)));
 80013cc:	bf00      	nop
 80013ce:	2102      	movs	r1, #2
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <DHT_Read+0x8c>)
 80013d2:	f001 f87f 	bl	80024d4 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f8      	beq.n	80013ce <DHT_Read+0xe>
		US_Delay(40);
 80013dc:	2028      	movs	r0, #40	; 0x28
 80013de:	f7ff ff51 	bl	8001284 <US_Delay>
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))) data &= ~(1 << (7 - i));
 80013e2:	2102      	movs	r1, #2
 80013e4:	4819      	ldr	r0, [pc, #100]	; (800144c <DHT_Read+0x8c>)
 80013e6:	f001 f875 	bl	80024d4 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10e      	bne.n	800140e <DHT_Read+0x4e>
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2201      	movs	r2, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	b25a      	sxtb	r2, r3
 8001402:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001406:	4013      	ands	r3, r2
 8001408:	b25b      	sxtb	r3, r3
 800140a:	71bb      	strb	r3, [r7, #6]
 800140c:	e00b      	b.n	8001426 <DHT_Read+0x66>
		else data |= (1 << (7 - i));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f1c3 0307 	rsb	r3, r3, #7
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	b25a      	sxtb	r2, r3
 800141c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001420:	4313      	orrs	r3, r2
 8001422:	b25b      	sxtb	r3, r3
 8001424:	71bb      	strb	r3, [r7, #6]
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN)));
 8001426:	bf00      	nop
 8001428:	2102      	movs	r1, #2
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <DHT_Read+0x8c>)
 800142c:	f001 f852 	bl	80024d4 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f8      	bne.n	8001428 <DHT_Read+0x68>
	for (i = 0; i < 8; i++) {
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	3301      	adds	r3, #1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b07      	cmp	r3, #7
 8001440:	d9c4      	bls.n	80013cc <DHT_Read+0xc>
	}

	return data;
 8001442:	79bb      	ldrb	r3, [r7, #6]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020000 	.word	0x40020000

08001450 <DHT_GetData>:

void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	DHT_Start();
 8001458:	f7ff ff62 	bl	8001320 <DHT_Start>
	response = DHT_Check_Response();
 800145c:	f7ff ff82 	bl	8001364 <DHT_Check_Response>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <DHT_GetData+0xa4>)
 8001466:	701a      	strb	r2, [r3, #0]
	rh_byte1 = DHT_Read();
 8001468:	f7ff ffaa 	bl	80013c0 <DHT_Read>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <DHT_GetData+0xa8>)
 8001472:	701a      	strb	r2, [r3, #0]
	rh_byte2 = DHT_Read();
 8001474:	f7ff ffa4 	bl	80013c0 <DHT_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <DHT_GetData+0xac>)
 800147e:	701a      	strb	r2, [r3, #0]
	temp_byte1 = DHT_Read();
 8001480:	f7ff ff9e 	bl	80013c0 <DHT_Read>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <DHT_GetData+0xb0>)
 800148a:	701a      	strb	r2, [r3, #0]
	temp_byte2 = DHT_Read();
 800148c:	f7ff ff98 	bl	80013c0 <DHT_Read>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <DHT_GetData+0xb4>)
 8001496:	701a      	strb	r2, [r3, #0]
	checksum = DHT_Read();
 8001498:	f7ff ff92 	bl	80013c0 <DHT_Read>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <DHT_GetData+0xb8>)
 80014a2:	801a      	strh	r2, [r3, #0]

	if (checksum == (rh_byte1 + rh_byte2 + temp_byte1 + temp_byte2)) {
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <DHT_GetData+0xb8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <DHT_GetData+0xa8>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <DHT_GetData+0xac>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <DHT_GetData+0xb0>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <DHT_GetData+0xb4>)
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4299      	cmp	r1, r3
 80014c4:	d111      	bne.n	80014ea <DHT_GetData+0x9a>
		DHT_Data->temperature = temp_byte1;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <DHT_GetData+0xb0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edc3 7a00 	vstr	s15, [r3]
		DHT_Data->humidity = rh_byte1;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <DHT_GetData+0xa8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000094 	.word	0x20000094
 80014f8:	20000512 	.word	0x20000512
 80014fc:	2000050d 	.word	0x2000050d
 8001500:	2000050e 	.word	0x2000050e
 8001504:	2000050c 	.word	0x2000050c
 8001508:	20000510 	.word	0x20000510

0800150c <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	// Check if LCD is connected to I2C
	if (!ssd1306_I2C_IsDeviceConnected(SSD1306_I2C, SSD1306_I2C_ADDR)) {
 8001510:	2178      	movs	r1, #120	; 0x78
 8001512:	4862      	ldr	r0, [pc, #392]	; (800169c <SSD1306_Init+0x190>)
 8001514:	f000 fb52 	bl	8001bbc <ssd1306_I2C_IsDeviceConnected>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <SSD1306_Init+0x16>
		return 0;
 800151e:	2300      	movs	r3, #0
 8001520:	e0b9      	b.n	8001696 <SSD1306_Init+0x18a>
	}

	HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f000 fd34 	bl	8001f90 <HAL_Delay>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001528:	23ae      	movs	r3, #174	; 0xae
 800152a:	2200      	movs	r2, #0
 800152c:	2178      	movs	r1, #120	; 0x78
 800152e:	485b      	ldr	r0, [pc, #364]	; (800169c <SSD1306_Init+0x190>)
 8001530:	f000 fac2 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001534:	2320      	movs	r3, #32
 8001536:	2200      	movs	r2, #0
 8001538:	2178      	movs	r1, #120	; 0x78
 800153a:	4858      	ldr	r0, [pc, #352]	; (800169c <SSD1306_Init+0x190>)
 800153c:	f000 fabc 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001540:	2310      	movs	r3, #16
 8001542:	2200      	movs	r2, #0
 8001544:	2178      	movs	r1, #120	; 0x78
 8001546:	4855      	ldr	r0, [pc, #340]	; (800169c <SSD1306_Init+0x190>)
 8001548:	f000 fab6 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800154c:	23b0      	movs	r3, #176	; 0xb0
 800154e:	2200      	movs	r2, #0
 8001550:	2178      	movs	r1, #120	; 0x78
 8001552:	4852      	ldr	r0, [pc, #328]	; (800169c <SSD1306_Init+0x190>)
 8001554:	f000 fab0 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001558:	23c8      	movs	r3, #200	; 0xc8
 800155a:	2200      	movs	r2, #0
 800155c:	2178      	movs	r1, #120	; 0x78
 800155e:	484f      	ldr	r0, [pc, #316]	; (800169c <SSD1306_Init+0x190>)
 8001560:	f000 faaa 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001564:	2300      	movs	r3, #0
 8001566:	2200      	movs	r2, #0
 8001568:	2178      	movs	r1, #120	; 0x78
 800156a:	484c      	ldr	r0, [pc, #304]	; (800169c <SSD1306_Init+0x190>)
 800156c:	f000 faa4 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001570:	2310      	movs	r3, #16
 8001572:	2200      	movs	r2, #0
 8001574:	2178      	movs	r1, #120	; 0x78
 8001576:	4849      	ldr	r0, [pc, #292]	; (800169c <SSD1306_Init+0x190>)
 8001578:	f000 fa9e 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	2200      	movs	r2, #0
 8001580:	2178      	movs	r1, #120	; 0x78
 8001582:	4846      	ldr	r0, [pc, #280]	; (800169c <SSD1306_Init+0x190>)
 8001584:	f000 fa98 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001588:	2381      	movs	r3, #129	; 0x81
 800158a:	2200      	movs	r2, #0
 800158c:	2178      	movs	r1, #120	; 0x78
 800158e:	4843      	ldr	r0, [pc, #268]	; (800169c <SSD1306_Init+0x190>)
 8001590:	f000 fa92 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	2200      	movs	r2, #0
 8001598:	2178      	movs	r1, #120	; 0x78
 800159a:	4840      	ldr	r0, [pc, #256]	; (800169c <SSD1306_Init+0x190>)
 800159c:	f000 fa8c 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015a0:	23a1      	movs	r3, #161	; 0xa1
 80015a2:	2200      	movs	r2, #0
 80015a4:	2178      	movs	r1, #120	; 0x78
 80015a6:	483d      	ldr	r0, [pc, #244]	; (800169c <SSD1306_Init+0x190>)
 80015a8:	f000 fa86 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015ac:	23a6      	movs	r3, #166	; 0xa6
 80015ae:	2200      	movs	r2, #0
 80015b0:	2178      	movs	r1, #120	; 0x78
 80015b2:	483a      	ldr	r0, [pc, #232]	; (800169c <SSD1306_Init+0x190>)
 80015b4:	f000 fa80 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015b8:	23a8      	movs	r3, #168	; 0xa8
 80015ba:	2200      	movs	r2, #0
 80015bc:	2178      	movs	r1, #120	; 0x78
 80015be:	4837      	ldr	r0, [pc, #220]	; (800169c <SSD1306_Init+0x190>)
 80015c0:	f000 fa7a 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015c4:	233f      	movs	r3, #63	; 0x3f
 80015c6:	2200      	movs	r2, #0
 80015c8:	2178      	movs	r1, #120	; 0x78
 80015ca:	4834      	ldr	r0, [pc, #208]	; (800169c <SSD1306_Init+0x190>)
 80015cc:	f000 fa74 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015d0:	23a4      	movs	r3, #164	; 0xa4
 80015d2:	2200      	movs	r2, #0
 80015d4:	2178      	movs	r1, #120	; 0x78
 80015d6:	4831      	ldr	r0, [pc, #196]	; (800169c <SSD1306_Init+0x190>)
 80015d8:	f000 fa6e 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015dc:	23d3      	movs	r3, #211	; 0xd3
 80015de:	2200      	movs	r2, #0
 80015e0:	2178      	movs	r1, #120	; 0x78
 80015e2:	482e      	ldr	r0, [pc, #184]	; (800169c <SSD1306_Init+0x190>)
 80015e4:	f000 fa68 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015e8:	2300      	movs	r3, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	2178      	movs	r1, #120	; 0x78
 80015ee:	482b      	ldr	r0, [pc, #172]	; (800169c <SSD1306_Init+0x190>)
 80015f0:	f000 fa62 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015f4:	23d5      	movs	r3, #213	; 0xd5
 80015f6:	2200      	movs	r2, #0
 80015f8:	2178      	movs	r1, #120	; 0x78
 80015fa:	4828      	ldr	r0, [pc, #160]	; (800169c <SSD1306_Init+0x190>)
 80015fc:	f000 fa5c 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001600:	23f0      	movs	r3, #240	; 0xf0
 8001602:	2200      	movs	r2, #0
 8001604:	2178      	movs	r1, #120	; 0x78
 8001606:	4825      	ldr	r0, [pc, #148]	; (800169c <SSD1306_Init+0x190>)
 8001608:	f000 fa56 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800160c:	23d9      	movs	r3, #217	; 0xd9
 800160e:	2200      	movs	r2, #0
 8001610:	2178      	movs	r1, #120	; 0x78
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <SSD1306_Init+0x190>)
 8001614:	f000 fa50 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001618:	2322      	movs	r3, #34	; 0x22
 800161a:	2200      	movs	r2, #0
 800161c:	2178      	movs	r1, #120	; 0x78
 800161e:	481f      	ldr	r0, [pc, #124]	; (800169c <SSD1306_Init+0x190>)
 8001620:	f000 fa4a 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001624:	23da      	movs	r3, #218	; 0xda
 8001626:	2200      	movs	r2, #0
 8001628:	2178      	movs	r1, #120	; 0x78
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <SSD1306_Init+0x190>)
 800162c:	f000 fa44 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001630:	2312      	movs	r3, #18
 8001632:	2200      	movs	r2, #0
 8001634:	2178      	movs	r1, #120	; 0x78
 8001636:	4819      	ldr	r0, [pc, #100]	; (800169c <SSD1306_Init+0x190>)
 8001638:	f000 fa3e 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800163c:	23db      	movs	r3, #219	; 0xdb
 800163e:	2200      	movs	r2, #0
 8001640:	2178      	movs	r1, #120	; 0x78
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <SSD1306_Init+0x190>)
 8001644:	f000 fa38 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001648:	2320      	movs	r3, #32
 800164a:	2200      	movs	r2, #0
 800164c:	2178      	movs	r1, #120	; 0x78
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <SSD1306_Init+0x190>)
 8001650:	f000 fa32 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001654:	238d      	movs	r3, #141	; 0x8d
 8001656:	2200      	movs	r2, #0
 8001658:	2178      	movs	r1, #120	; 0x78
 800165a:	4810      	ldr	r0, [pc, #64]	; (800169c <SSD1306_Init+0x190>)
 800165c:	f000 fa2c 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001660:	2314      	movs	r3, #20
 8001662:	2200      	movs	r2, #0
 8001664:	2178      	movs	r1, #120	; 0x78
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <SSD1306_Init+0x190>)
 8001668:	f000 fa26 	bl	8001ab8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800166c:	23af      	movs	r3, #175	; 0xaf
 800166e:	2200      	movs	r2, #0
 8001670:	2178      	movs	r1, #120	; 0x78
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <SSD1306_Init+0x190>)
 8001674:	f000 fa20 	bl	8001ab8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001678:	2000      	movs	r0, #0
 800167a:	f000 f847 	bl	800170c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800167e:	f000 f811 	bl	80016a4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <SSD1306_Init+0x194>)
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SSD1306_Init+0x194>)
 800168a:	2200      	movs	r2, #0
 800168c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SSD1306_Init+0x194>)
 8001690:	2201      	movs	r2, #1
 8001692:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	20000498 	.word	0x20000498

080016a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af02      	add	r7, sp, #8
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e022      	b.n	80016f6 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3b50      	subs	r3, #80	; 0x50
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	2178      	movs	r1, #120	; 0x78
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <SSD1306_UpdateScreen+0x60>)
 80016bc:	f000 f9fc 	bl	8001ab8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2178      	movs	r1, #120	; 0x78
 80016c6:	480f      	ldr	r0, [pc, #60]	; (8001704 <SSD1306_UpdateScreen+0x60>)
 80016c8:	f000 f9f6 	bl	8001ab8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016cc:	2310      	movs	r3, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	2178      	movs	r1, #120	; 0x78
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <SSD1306_UpdateScreen+0x60>)
 80016d4:	f000 f9f0 	bl	8001ab8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	01db      	lsls	r3, r3, #7
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SSD1306_UpdateScreen+0x64>)
 80016de:	441a      	add	r2, r3
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	2178      	movs	r1, #120	; 0x78
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <SSD1306_UpdateScreen+0x60>)
 80016ec:	f000 fa08 	bl	8001b00 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3301      	adds	r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	d9d9      	bls.n	80016b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	20000098 	.word	0x20000098

0800170c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <SSD1306_Fill+0x14>
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <SSD1306_Fill+0x16>
 8001720:	23ff      	movs	r3, #255	; 0xff
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	4619      	mov	r1, r3
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <SSD1306_Fill+0x2c>)
 800172a:	f001 ff57 	bl	80035dc <memset>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000098 	.word	0x20000098

0800173c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	460b      	mov	r3, r1
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	70fb      	strb	r3, [r7, #3]
	if (
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	2b7f      	cmp	r3, #127	; 0x7f
 8001752:	d848      	bhi.n	80017e6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	2b3f      	cmp	r3, #63	; 0x3f
 8001758:	d845      	bhi.n	80017e6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <SSD1306_DrawPixel+0xb8>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d11a      	bne.n	80017ac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	b298      	uxth	r0, r3
 800177e:	4603      	mov	r3, r0
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	4413      	add	r3, r2
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	2101      	movs	r1, #1
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	b25b      	sxtb	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b259      	sxtb	r1, r3
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	4413      	add	r3, r2
 80017a4:	b2c9      	uxtb	r1, r1
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017a8:	54d1      	strb	r1, [r2, r3]
 80017aa:	e01d      	b.n	80017e8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	b298      	uxth	r0, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	01db      	lsls	r3, r3, #7
 80017b8:	4413      	add	r3, r2
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	b25a      	sxtb	r2, r3
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	b259      	sxtb	r1, r3
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	4603      	mov	r3, r0
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	4413      	add	r3, r2
 80017de:	b2c9      	uxtb	r1, r1
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017e2:	54d1      	strb	r1, [r2, r3]
 80017e4:	e000      	b.n	80017e8 <SSD1306_DrawPixel+0xac>
		return;
 80017e6:	bf00      	nop
	}
}
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000498 	.word	0x20000498
 80017f8:	20000098 	.word	0x20000098

080017fc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SSD1306_GotoXY+0x28>)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <SSD1306_GotoXY+0x28>)
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	8053      	strh	r3, [r2, #2]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000498 	.word	0x20000498

08001828 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <SSD1306_Putc+0xfc>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
	if (
 8001844:	2b7f      	cmp	r3, #127	; 0x7f
 8001846:	dc07      	bgt.n	8001858 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <SSD1306_Putc+0xfc>)
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	461a      	mov	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001854:	2b3f      	cmp	r3, #63	; 0x3f
 8001856:	dd01      	ble.n	800185c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001858:	2300      	movs	r3, #0
 800185a:	e05e      	b.n	800191a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e04b      	b.n	80018fa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3b20      	subs	r3, #32
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	7849      	ldrb	r1, [r1, #1]
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4619      	mov	r1, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	440b      	add	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e030      	b.n	80018e8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <SSD1306_Putc+0xfc>)
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b298      	uxth	r0, r3
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <SSD1306_Putc+0xfc>)
 80018a4:	885a      	ldrh	r2, [r3, #2]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	79ba      	ldrb	r2, [r7, #6]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff ff43 	bl	800173c <SSD1306_DrawPixel>
 80018b6:	e014      	b.n	80018e2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <SSD1306_Putc+0xfc>)
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b298      	uxth	r0, r3
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <SSD1306_Putc+0xfc>)
 80018c6:	885a      	ldrh	r2, [r3, #2]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b299      	uxth	r1, r3
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff ff2d 	bl	800173c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d3c8      	bcc.n	8001886 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	461a      	mov	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	4293      	cmp	r3, r2
 8001904:	d3ad      	bcc.n	8001862 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <SSD1306_Putc+0xfc>)
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <SSD1306_Putc+0xfc>)
 8001916:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000498 	.word	0x20000498

08001928 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001936:	e012      	b.n	800195e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff71 	bl	8001828 <SSD1306_Putc>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d002      	beq.n	8001958 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	e008      	b.n	800196a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e8      	bne.n	8001938 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <ssd1306_I2C_Start>:
#define I2C_RECEIVER_MODE      1
#define I2C_ACK_ENABLE         1
#define I2C_ACK_DISABLE        0

int16_t ssd1306_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	460b      	mov	r3, r1
 8001988:	70bb      	strb	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	707b      	strb	r3, [r7, #1]
	I2Cx->CR1 |= I2C_CR1_START;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]

	// Wait while I2C is busy
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 800199c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019a0:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 80019a2:	e00a      	b.n	80019ba <ssd1306_I2C_Start+0x46>
		if (--ssd1306_I2C_Timeout == 0x00) {
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	4a2f      	ldr	r2, [pc, #188]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <ssd1306_I2C_Start+0x46>
			return 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e04f      	b.n	8001a5a <ssd1306_I2C_Start+0xe6>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0ee      	beq.n	80019a4 <ssd1306_I2C_Start+0x30>
		}
	}

	// Enable ack if selected
	if (ack) {
 80019c6:	787b      	ldrb	r3, [r7, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <ssd1306_I2C_Start+0x64>
		I2Cx->CR1 |= I2C_ACK_ENABLE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]
	}

	// Send write/read bit
	if (direction == I2C_TRANSMITTER_MODE) {
 80019d8:	78bb      	ldrb	r3, [r7, #2]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d11a      	bne.n	8001a14 <ssd1306_I2C_Start+0xa0>
		// Send address with last bit == 0
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f023 0201 	bic.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]

		// Wait till finished
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019ee:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80019f0:	e00a      	b.n	8001a08 <ssd1306_I2C_Start+0x94>
			if (--ssd1306_I2C_Timeout == 0x00) {
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <ssd1306_I2C_Start+0x94>
				return 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e028      	b.n	8001a5a <ssd1306_I2C_Start+0xe6>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <ssd1306_I2C_Start+0x7e>
			}
		}

	}

	if (direction == I2C_RECEIVER_MODE) {
 8001a14:	78bb      	ldrb	r3, [r7, #2]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d11c      	bne.n	8001a54 <ssd1306_I2C_Start+0xe0>
		// Send address with last bit == 1
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]

		// Wait till finished
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 8001a2a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a2e:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001a30:	e00a      	b.n	8001a48 <ssd1306_I2C_Start+0xd4>
			if (--ssd1306_I2C_Timeout == 0x00) {
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <ssd1306_I2C_Start+0xf4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <ssd1306_I2C_Start+0xd4>
				return 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e008      	b.n	8001a5a <ssd1306_I2C_Start+0xe6>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <ssd1306_I2C_Start+0xbe>
			}
		}
	}

	// Read SR to clear ADDR flag
	I2Cx->SR2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]

	return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200004a0 	.word	0x200004a0

08001a6c <ssd1306_I2C_WriteData>:

void ssd1306_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	// Wait while I2C is busy
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <ssd1306_I2C_WriteData+0x48>)
 8001a7a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a7e:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001a80:	e004      	b.n	8001a8c <ssd1306_I2C_WriteData+0x20>
		ssd1306_I2C_Timeout--;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <ssd1306_I2C_WriteData+0x48>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <ssd1306_I2C_WriteData+0x48>)
 8001a8a:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <ssd1306_I2C_WriteData+0x34>
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <ssd1306_I2C_WriteData+0x48>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <ssd1306_I2C_WriteData+0x16>
	}

	// Send I2C data
	I2Cx->DR = data;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200004a0 	.word	0x200004a0

08001ab8 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70bb      	strb	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	707b      	strb	r3, [r7, #1]
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001ad2:	78f9      	ldrb	r1, [r7, #3]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff4b 	bl	8001974 <ssd1306_I2C_Start>
	ssd1306_I2C_WriteData(I2Cx, reg);
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffc2 	bl	8001a6c <ssd1306_I2C_WriteData>
	ssd1306_I2C_WriteData(I2Cx, data);
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffbd 	bl	8001a6c <ssd1306_I2C_WriteData>
	ssd1306_I2C_Stop(I2Cx);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f832 	bl	8001b5c <ssd1306_I2C_Stop>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t *data, uint16_t count)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001b12:	7af9      	ldrb	r1, [r7, #11]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff ff2b 	bl	8001974 <ssd1306_I2C_Start>

	ssd1306_I2C_WriteData(I2Cx, reg);
 8001b1e:	7abb      	ldrb	r3, [r7, #10]
 8001b20:	4619      	mov	r1, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff ffa2 	bl	8001a6c <ssd1306_I2C_WriteData>

	for (i = 0; i < count; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	e00a      	b.n	8001b44 <ssd1306_I2C_WriteMulti+0x44>
		ssd1306_I2C_WriteData(I2Cx, data[i]);
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff ff97 	bl	8001a6c <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	3301      	adds	r3, #1
 8001b42:	75fb      	strb	r3, [r7, #23]
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	8c3a      	ldrh	r2, [r7, #32]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8ef      	bhi.n	8001b2e <ssd1306_I2C_WriteMulti+0x2e>
	}

	ssd1306_I2C_Stop(I2Cx);
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f804 	bl	8001b5c <ssd1306_I2C_Stop>
}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <ssd1306_I2C_Stop>:

uint8_t ssd1306_I2C_Stop(I2C_TypeDef* I2Cx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	// Wait while transmitter is full
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <ssd1306_I2C_Stop+0x5c>)
 8001b66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b6a:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001b6c:	e00a      	b.n	8001b84 <ssd1306_I2C_Stop+0x28>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <ssd1306_I2C_Stop+0x5c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <ssd1306_I2C_Stop+0x5c>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <ssd1306_I2C_Stop+0x5c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <ssd1306_I2C_Stop+0x28>
			return 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e012      	b.n	8001baa <ssd1306_I2C_Stop+0x4e>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <ssd1306_I2C_Stop+0x12>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0e8      	beq.n	8001b6e <ssd1306_I2C_Stop+0x12>
		}
	}

	// Generate stop condition
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]

	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200004a0 	.word	0x200004a0

08001bbc <ssd1306_I2C_IsDeviceConnected>:

uint8_t ssd1306_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

	// Try to start, function will return 0 in case device will send ACK
	if (!ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8001bcc:	78f9      	ldrb	r1, [r7, #3]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fece 	bl	8001974 <ssd1306_I2C_Start>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <ssd1306_I2C_IsDeviceConnected+0x26>
		connected = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
	}

	/* STOP I2C */
	ssd1306_I2C_Stop(I2Cx);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffba 	bl	8001b5c <ssd1306_I2C_Stop>

	/* Return status */
	return connected;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c32:	2007      	movs	r0, #7
 8001c34:	f000 fa80 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_TIM_Base_MspInit+0x3c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10d      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_TIM_Base_MspInit+0x40>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_TIM_Base_MspInit+0x40>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_TIM_Base_MspInit+0x40>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40023800 	.word	0x40023800

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f938 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
	}

return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
	}
	return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f001 fbca 	bl	8003588 <__errno>
 8001df4:	4602      	mov	r2, r0
 8001df6:	230c      	movs	r3, #12
 8001df8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20020000 	.word	0x20020000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	200004a4 	.word	0x200004a4
 8001e28:	20000520 	.word	0x20000520

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <SystemInit+0x28>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <SystemInit+0x28>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SystemInit+0x28>)
 8001e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e46:	609a      	str	r2, [r3, #8]
#endif
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
  ldr  r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e82:	f7ff ffd3 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f001 fb85 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe ff5f 	bl	8000d4c <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e94:	08004c44 	.word	0x08004c44
  ldr  r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e9c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001ea0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001ea4:	2000051c 	.word	0x2000051c

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f92f 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f808 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fe88 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x54>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f939 	bl	8002186 <HAL_SYSTICK_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00e      	b.n	8001f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f2c:	f000 f90f 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_InitTick+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	2000000c 	.word	0x2000000c

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000010 	.word	0x20000010
 8001f74:	20000514 	.word	0x20000514

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000514 	.word	0x20000514

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ffee 	bl	8001f78 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_Delay+0x40>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000010 	.word	0x20000010

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff47 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff5c 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffb0 	bl	80020f4 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d00b      	beq.n	80021fa <HAL_GPIO_Init+0x5a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ee:	2b11      	cmp	r3, #17
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d130      	bne.n	800225c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0xfc>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b12      	cmp	r3, #18
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_GPIO_Init+0x308>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_GPIO_Init+0x308>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x314>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x318>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x31c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x320>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x328>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_GPIO_Init+0x30c>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e001      	b.n	80024f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e11f      	b.n	800278a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f922 	bl	80027a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800259c:	f000 fd48 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a7b      	ldr	r2, [pc, #492]	; (8002794 <HAL_I2C_Init+0x25c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d807      	bhi.n	80025bc <HAL_I2C_Init+0x84>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a7a      	ldr	r2, [pc, #488]	; (8002798 <HAL_I2C_Init+0x260>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	bf94      	ite	ls
 80025b4:	2301      	movls	r3, #1
 80025b6:	2300      	movhi	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e006      	b.n	80025ca <HAL_I2C_Init+0x92>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a77      	ldr	r2, [pc, #476]	; (800279c <HAL_I2C_Init+0x264>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0db      	b.n	800278a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a72      	ldr	r2, [pc, #456]	; (80027a0 <HAL_I2C_Init+0x268>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0c9b      	lsrs	r3, r3, #18
 80025dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a64      	ldr	r2, [pc, #400]	; (8002794 <HAL_I2C_Init+0x25c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d802      	bhi.n	800260c <HAL_I2C_Init+0xd4>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	e009      	b.n	8002620 <HAL_I2C_Init+0xe8>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a63      	ldr	r2, [pc, #396]	; (80027a4 <HAL_I2C_Init+0x26c>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	430b      	orrs	r3, r1
 8002626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4956      	ldr	r1, [pc, #344]	; (8002794 <HAL_I2C_Init+0x25c>)
 800263c:	428b      	cmp	r3, r1
 800263e:	d80d      	bhi.n	800265c <HAL_I2C_Init+0x124>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e59      	subs	r1, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fbb1 f3f3 	udiv	r3, r1, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b04      	cmp	r3, #4
 8002656:	bf38      	it	cc
 8002658:	2304      	movcc	r3, #4
 800265a:	e04f      	b.n	80026fc <HAL_I2C_Init+0x1c4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_I2C_Init+0x150>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e012      	b.n	80026ae <HAL_I2C_Init+0x176>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x17e>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_I2C_Init+0x1c4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <HAL_I2C_Init+0x1a4>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e58      	subs	r0, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Init+0x1c4>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800272a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6911      	ldr	r1, [r2, #16]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000186a0 	.word	0x000186a0
 8002798:	001e847f 	.word	0x001e847f
 800279c:	003d08ff 	.word	0x003d08ff
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e25b      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d075      	beq.n	80028c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	4ba3      	ldr	r3, [pc, #652]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4ba0      	ldr	r3, [pc, #640]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b99      	ldr	r3, [pc, #612]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e236      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x74>
 8002822:	4b91      	ldr	r3, [pc, #580]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a90      	ldr	r2, [pc, #576]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b8b      	ldr	r3, [pc, #556]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a8a      	ldr	r2, [pc, #552]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a87      	ldr	r2, [pc, #540]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a83      	ldr	r2, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a80      	ldr	r2, [pc, #512]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fb80 	bl	8001f78 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fb7c 	bl	8001f78 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1fb      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xc0>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fb6c 	bl	8001f78 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fb68 	bl	8001f78 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1e7      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1bb      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4952      	ldr	r1, [pc, #328]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_OscConfig+0x2b0>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7ff fb21 	bl	8001f78 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7ff fb1d 	bl	8001f78 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e19c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4940      	ldr	r1, [pc, #256]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <HAL_RCC_OscConfig+0x2b0>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff fb00 	bl	8001f78 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff fafc 	bl	8001f78 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e17b      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d030      	beq.n	8002a08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_OscConfig+0x2b4>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7ff fae0 	bl	8001f78 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029bc:	f7ff fadc 	bl	8001f78 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e15b      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x200>
 80029da:	e015      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_OscConfig+0x2b4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fac9 	bl	8001f78 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ea:	f7ff fac5 	bl	8001f78 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e144      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a0 	beq.w	8002b56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x2b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_OscConfig+0x2b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_RCC_OscConfig+0x2b8>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5e:	f7ff fa8b 	bl	8001f78 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	e011      	b.n	8002a8a <HAL_RCC_OscConfig+0x2ce>
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
 8002a74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a78:	f7ff fa7e 	bl	8001f78 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0fd      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x4d4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x2f0>
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x32a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a76      	ldr	r2, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a73      	ldr	r2, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x32a>
 8002ace:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a70      	ldr	r2, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b6e      	ldr	r3, [pc, #440]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a6d      	ldr	r2, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7ff fa43 	bl	8001f78 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff fa3f 	bl	8001f78 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0bc      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCC_OscConfig+0x33a>
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff fa2d 	bl	8001f78 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7ff fa29 	bl	8001f78 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0a6      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4b52      	ldr	r3, [pc, #328]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8092 	beq.w	8002c84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d05c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d141      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b48      	ldr	r3, [pc, #288]	; (8002c98 <HAL_RCC_OscConfig+0x4dc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7ff f9fd 	bl	8001f78 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7ff f9f9 	bl	8001f78 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e078      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	4933      	ldr	r1, [pc, #204]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCC_OscConfig+0x4dc>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f9d2 	bl	8001f78 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f9ce 	bl	8001f78 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04d      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x41c>
 8002bf6:	e045      	b.n	8002c84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x4dc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7ff f9bb 	bl	8001f78 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7ff f9b7 	bl	8001f78 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e036      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x44a>
 8002c24:	e02e      	b.n	8002c84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e029      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_RCC_OscConfig+0x4d8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d115      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40007000 	.word	0x40007000
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470060 	.word	0x42470060

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0cc      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b8      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	494d      	ldr	r1, [pc, #308]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d044      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d119      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e067      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4934      	ldr	r1, [pc, #208]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff f8f4 	bl	8001f78 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d94:	f7ff f8f0 	bl	8001f78 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e04f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 020c 	and.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1eb      	bne.n	8002d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d20c      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e032      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4916      	ldr	r1, [pc, #88]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	490e      	ldr	r1, [pc, #56]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e22:	f000 f821 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e26:	4601      	mov	r1, r0
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	fa21 f303 	lsr.w	r3, r1, r3
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f854 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023c00 	.word	0x40023c00
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08004b84 	.word	0x08004b84
 8002e60:	20000008 	.word	0x20000008
 8002e64:	2000000c 	.word	0x2000000c

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d007      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x32>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 80b4 	bne.w	8002ffc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e96:	60bb      	str	r3, [r7, #8]
       break;
 8002e98:	e0b3      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9a:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e9c:	60bb      	str	r3, [r7, #8]
      break;
 8002e9e:	e0b0      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eaa:	4b58      	ldr	r3, [pc, #352]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d04a      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b55      	ldr	r3, [pc, #340]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	ea03 0501 	and.w	r5, r3, r1
 8002ecc:	ea04 0602 	and.w	r6, r4, r2
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4632      	mov	r2, r6
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	f04f 0400 	mov.w	r4, #0
 8002edc:	0154      	lsls	r4, r2, #5
 8002ede:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ee2:	014b      	lsls	r3, r1, #5
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	1b49      	subs	r1, r1, r5
 8002eea:	eb62 0206 	sbc.w	r2, r2, r6
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f04f 0400 	mov.w	r4, #0
 8002ef6:	0194      	lsls	r4, r2, #6
 8002ef8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002efc:	018b      	lsls	r3, r1, #6
 8002efe:	1a5b      	subs	r3, r3, r1
 8002f00:	eb64 0402 	sbc.w	r4, r4, r2
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	00e2      	lsls	r2, r4, #3
 8002f0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f12:	00d9      	lsls	r1, r3, #3
 8002f14:	460b      	mov	r3, r1
 8002f16:	4614      	mov	r4, r2
 8002f18:	195b      	adds	r3, r3, r5
 8002f1a:	eb44 0406 	adc.w	r4, r4, r6
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	0262      	lsls	r2, r4, #9
 8002f28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f2c:	0259      	lsls	r1, r3, #9
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4614      	mov	r4, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	4621      	mov	r1, r4
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	f7fd fd84 	bl	8000a4c <__aeabi_uldivmod>
 8002f44:	4603      	mov	r3, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e049      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	ea03 0501 	and.w	r5, r3, r1
 8002f62:	ea04 0602 	and.w	r6, r4, r2
 8002f66:	4629      	mov	r1, r5
 8002f68:	4632      	mov	r2, r6
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	f04f 0400 	mov.w	r4, #0
 8002f72:	0154      	lsls	r4, r2, #5
 8002f74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f78:	014b      	lsls	r3, r1, #5
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	1b49      	subs	r1, r1, r5
 8002f80:	eb62 0206 	sbc.w	r2, r2, r6
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	0194      	lsls	r4, r2, #6
 8002f8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f92:	018b      	lsls	r3, r1, #6
 8002f94:	1a5b      	subs	r3, r3, r1
 8002f96:	eb64 0402 	sbc.w	r4, r4, r2
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fa8:	00d9      	lsls	r1, r3, #3
 8002faa:	460b      	mov	r3, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	195b      	adds	r3, r3, r5
 8002fb0:	eb44 0406 	adc.w	r4, r4, r6
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	02a2      	lsls	r2, r4, #10
 8002fbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fc2:	0299      	lsls	r1, r3, #10
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	4621      	mov	r1, r4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f04f 0400 	mov.w	r4, #0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	f7fd fd39 	bl	8000a4c <__aeabi_uldivmod>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	60bb      	str	r3, [r7, #8]
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ffe:	60bb      	str	r3, [r7, #8]
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	68bb      	ldr	r3, [r7, #8]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000008 	.word	0x20000008

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003034:	f7ff fff0 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003038:	4601      	mov	r1, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0a9b      	lsrs	r3, r3, #10
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4a03      	ldr	r2, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08004b94 	.word	0x08004b94

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01d      	b.n	80030a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fde0 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 f8c0 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_ConfigClockSource+0x18>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0a6      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x166>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d067      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x120>
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d80b      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0x6c>
 8003102:	2b10      	cmp	r3, #16
 8003104:	d073      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x140>
 8003106:	2b10      	cmp	r3, #16
 8003108:	d802      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x62>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d06f      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800310e:	e078      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003110:	2b20      	cmp	r3, #32
 8003112:	d06c      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x140>
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d06a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003118:	e073      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800311a:	2b70      	cmp	r3, #112	; 0x70
 800311c:	d00d      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x8c>
 800311e:	2b70      	cmp	r3, #112	; 0x70
 8003120:	d804      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x7e>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d033      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xe0>
 8003126:	2b60      	cmp	r3, #96	; 0x60
 8003128:	d041      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x100>
      break;
 800312a:	e06a      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d066      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x152>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	d017      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003138:	e063      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f000 f981 	bl	8003450 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800315c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	609a      	str	r2, [r3, #8]
      break;
 8003166:	e04c      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f000 f96a 	bl	8003450 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318a:	609a      	str	r2, [r3, #8]
      break;
 800318c:	e039      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	461a      	mov	r2, r3
 800319c:	f000 f8de 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2150      	movs	r1, #80	; 0x50
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f937 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031ac:	e029      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f8fd 	bl	80033ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2160      	movs	r1, #96	; 0x60
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f927 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031cc:	e019      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 f8be 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f917 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031ec:	e009      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f000 f90e 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031fe:	e000      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003200:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d00f      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <TIM_Base_SetConfig+0x118>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <TIM_Base_SetConfig+0x11c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <TIM_Base_SetConfig+0x120>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3a      	ldr	r2, [pc, #232]	; (8003340 <TIM_Base_SetConfig+0x124>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d027      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <TIM_Base_SetConfig+0x118>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d023      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <TIM_Base_SetConfig+0x11c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <TIM_Base_SetConfig+0x120>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a29      	ldr	r2, [pc, #164]	; (8003340 <TIM_Base_SetConfig+0x124>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d017      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <TIM_Base_SetConfig+0x128>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <TIM_Base_SetConfig+0x12c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <TIM_Base_SetConfig+0x130>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a25      	ldr	r2, [pc, #148]	; (8003350 <TIM_Base_SetConfig+0x134>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <TIM_Base_SetConfig+0x138>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a23      	ldr	r2, [pc, #140]	; (8003358 <TIM_Base_SetConfig+0x13c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0xf8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <TIM_Base_SetConfig+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40010400 	.word	0x40010400
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800
 8003350:	40001800 	.word	0x40001800
 8003354:	40001c00 	.word	0x40001c00
 8003358:	40002000 	.word	0x40002000

0800335c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 030a 	bic.w	r3, r3, #10
 8003398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0210 	bic.w	r2, r3, #16
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	031b      	lsls	r3, r3, #12
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 0307 	orr.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	021a      	lsls	r2, r3, #8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	431a      	orrs	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e05a      	b.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d01d      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a18      	ldr	r2, [pc, #96]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10c      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40010400 	.word	0x40010400
 8003580:	40014000 	.word	0x40014000
 8003584:	40001800 	.word	0x40001800

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000014 	.word	0x20000014

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4e0d      	ldr	r6, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1ba4      	subs	r4, r4, r6
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2500      	movs	r5, #0
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4e0b      	ldr	r6, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f000 ff04 	bl	80043b4 <_init>
 80035ac:	1ba4      	subs	r4, r4, r6
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2500      	movs	r5, #0
 80035b2:	42a5      	cmp	r5, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035bc:	4798      	blx	r3
 80035be:	3501      	adds	r5, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c6:	4798      	blx	r3
 80035c8:	3501      	adds	r5, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	08004c3c 	.word	0x08004c3c
 80035d0:	08004c3c 	.word	0x08004c3c
 80035d4:	08004c3c 	.word	0x08004c3c
 80035d8:	08004c40 	.word	0x08004c40

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <iprintf>:
 80035ec:	b40f      	push	{r0, r1, r2, r3}
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <iprintf+0x2c>)
 80035f0:	b513      	push	{r0, r1, r4, lr}
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	b124      	cbz	r4, 8003600 <iprintf+0x14>
 80035f6:	69a3      	ldr	r3, [r4, #24]
 80035f8:	b913      	cbnz	r3, 8003600 <iprintf+0x14>
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 f84e 	bl	800369c <__sinit>
 8003600:	ab05      	add	r3, sp, #20
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	4620      	mov	r0, r4
 800360a:	f000 f955 	bl	80038b8 <_vfiprintf_r>
 800360e:	b002      	add	sp, #8
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr
 8003618:	20000014 	.word	0x20000014

0800361c <std>:
 800361c:	2300      	movs	r3, #0
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	e9c0 3300 	strd	r3, r3, [r0]
 8003626:	6083      	str	r3, [r0, #8]
 8003628:	8181      	strh	r1, [r0, #12]
 800362a:	6643      	str	r3, [r0, #100]	; 0x64
 800362c:	81c2      	strh	r2, [r0, #14]
 800362e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003632:	6183      	str	r3, [r0, #24]
 8003634:	4619      	mov	r1, r3
 8003636:	2208      	movs	r2, #8
 8003638:	305c      	adds	r0, #92	; 0x5c
 800363a:	f7ff ffcf 	bl	80035dc <memset>
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <std+0x38>)
 8003640:	6263      	str	r3, [r4, #36]	; 0x24
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <std+0x3c>)
 8003644:	62a3      	str	r3, [r4, #40]	; 0x28
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <std+0x40>)
 8003648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <std+0x44>)
 800364c:	6224      	str	r4, [r4, #32]
 800364e:	6323      	str	r3, [r4, #48]	; 0x30
 8003650:	bd10      	pop	{r4, pc}
 8003652:	bf00      	nop
 8003654:	08003e15 	.word	0x08003e15
 8003658:	08003e37 	.word	0x08003e37
 800365c:	08003e6f 	.word	0x08003e6f
 8003660:	08003e93 	.word	0x08003e93

08003664 <_cleanup_r>:
 8003664:	4901      	ldr	r1, [pc, #4]	; (800366c <_cleanup_r+0x8>)
 8003666:	f000 b885 	b.w	8003774 <_fwalk_reent>
 800366a:	bf00      	nop
 800366c:	0800416d 	.word	0x0800416d

08003670 <__sfmoreglue>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	1e4a      	subs	r2, r1, #1
 8003674:	2568      	movs	r5, #104	; 0x68
 8003676:	4355      	muls	r5, r2
 8003678:	460e      	mov	r6, r1
 800367a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800367e:	f000 f897 	bl	80037b0 <_malloc_r>
 8003682:	4604      	mov	r4, r0
 8003684:	b140      	cbz	r0, 8003698 <__sfmoreglue+0x28>
 8003686:	2100      	movs	r1, #0
 8003688:	e9c0 1600 	strd	r1, r6, [r0]
 800368c:	300c      	adds	r0, #12
 800368e:	60a0      	str	r0, [r4, #8]
 8003690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003694:	f7ff ffa2 	bl	80035dc <memset>
 8003698:	4620      	mov	r0, r4
 800369a:	bd70      	pop	{r4, r5, r6, pc}

0800369c <__sinit>:
 800369c:	6983      	ldr	r3, [r0, #24]
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
 80036a2:	bb33      	cbnz	r3, 80036f2 <__sinit+0x56>
 80036a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80036a8:	6503      	str	r3, [r0, #80]	; 0x50
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <__sinit+0x58>)
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <__sinit+0x5c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6282      	str	r2, [r0, #40]	; 0x28
 80036b2:	4298      	cmp	r0, r3
 80036b4:	bf04      	itt	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	6183      	streq	r3, [r0, #24]
 80036ba:	f000 f81f 	bl	80036fc <__sfp>
 80036be:	6060      	str	r0, [r4, #4]
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 f81b 	bl	80036fc <__sfp>
 80036c6:	60a0      	str	r0, [r4, #8]
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 f817 	bl	80036fc <__sfp>
 80036ce:	2200      	movs	r2, #0
 80036d0:	60e0      	str	r0, [r4, #12]
 80036d2:	2104      	movs	r1, #4
 80036d4:	6860      	ldr	r0, [r4, #4]
 80036d6:	f7ff ffa1 	bl	800361c <std>
 80036da:	2201      	movs	r2, #1
 80036dc:	2109      	movs	r1, #9
 80036de:	68a0      	ldr	r0, [r4, #8]
 80036e0:	f7ff ff9c 	bl	800361c <std>
 80036e4:	2202      	movs	r2, #2
 80036e6:	2112      	movs	r1, #18
 80036e8:	68e0      	ldr	r0, [r4, #12]
 80036ea:	f7ff ff97 	bl	800361c <std>
 80036ee:	2301      	movs	r3, #1
 80036f0:	61a3      	str	r3, [r4, #24]
 80036f2:	bd10      	pop	{r4, pc}
 80036f4:	08004b9c 	.word	0x08004b9c
 80036f8:	08003665 	.word	0x08003665

080036fc <__sfp>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <__sfp+0x70>)
 8003700:	681e      	ldr	r6, [r3, #0]
 8003702:	69b3      	ldr	r3, [r6, #24]
 8003704:	4607      	mov	r7, r0
 8003706:	b913      	cbnz	r3, 800370e <__sfp+0x12>
 8003708:	4630      	mov	r0, r6
 800370a:	f7ff ffc7 	bl	800369c <__sinit>
 800370e:	3648      	adds	r6, #72	; 0x48
 8003710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003714:	3b01      	subs	r3, #1
 8003716:	d503      	bpl.n	8003720 <__sfp+0x24>
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	b133      	cbz	r3, 800372a <__sfp+0x2e>
 800371c:	6836      	ldr	r6, [r6, #0]
 800371e:	e7f7      	b.n	8003710 <__sfp+0x14>
 8003720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003724:	b16d      	cbz	r5, 8003742 <__sfp+0x46>
 8003726:	3468      	adds	r4, #104	; 0x68
 8003728:	e7f4      	b.n	8003714 <__sfp+0x18>
 800372a:	2104      	movs	r1, #4
 800372c:	4638      	mov	r0, r7
 800372e:	f7ff ff9f 	bl	8003670 <__sfmoreglue>
 8003732:	6030      	str	r0, [r6, #0]
 8003734:	2800      	cmp	r0, #0
 8003736:	d1f1      	bne.n	800371c <__sfp+0x20>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4604      	mov	r4, r0
 800373e:	4620      	mov	r0, r4
 8003740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <__sfp+0x74>)
 8003744:	6665      	str	r5, [r4, #100]	; 0x64
 8003746:	e9c4 5500 	strd	r5, r5, [r4]
 800374a:	60a5      	str	r5, [r4, #8]
 800374c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003750:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003754:	2208      	movs	r2, #8
 8003756:	4629      	mov	r1, r5
 8003758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800375c:	f7ff ff3e 	bl	80035dc <memset>
 8003760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003768:	e7e9      	b.n	800373e <__sfp+0x42>
 800376a:	bf00      	nop
 800376c:	08004b9c 	.word	0x08004b9c
 8003770:	ffff0001 	.word	0xffff0001

08003774 <_fwalk_reent>:
 8003774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003778:	4680      	mov	r8, r0
 800377a:	4689      	mov	r9, r1
 800377c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003780:	2600      	movs	r6, #0
 8003782:	b914      	cbnz	r4, 800378a <_fwalk_reent+0x16>
 8003784:	4630      	mov	r0, r6
 8003786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800378e:	3f01      	subs	r7, #1
 8003790:	d501      	bpl.n	8003796 <_fwalk_reent+0x22>
 8003792:	6824      	ldr	r4, [r4, #0]
 8003794:	e7f5      	b.n	8003782 <_fwalk_reent+0xe>
 8003796:	89ab      	ldrh	r3, [r5, #12]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d907      	bls.n	80037ac <_fwalk_reent+0x38>
 800379c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037a0:	3301      	adds	r3, #1
 80037a2:	d003      	beq.n	80037ac <_fwalk_reent+0x38>
 80037a4:	4629      	mov	r1, r5
 80037a6:	4640      	mov	r0, r8
 80037a8:	47c8      	blx	r9
 80037aa:	4306      	orrs	r6, r0
 80037ac:	3568      	adds	r5, #104	; 0x68
 80037ae:	e7ee      	b.n	800378e <_fwalk_reent+0x1a>

080037b0 <_malloc_r>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	1ccd      	adds	r5, r1, #3
 80037b4:	f025 0503 	bic.w	r5, r5, #3
 80037b8:	3508      	adds	r5, #8
 80037ba:	2d0c      	cmp	r5, #12
 80037bc:	bf38      	it	cc
 80037be:	250c      	movcc	r5, #12
 80037c0:	2d00      	cmp	r5, #0
 80037c2:	4606      	mov	r6, r0
 80037c4:	db01      	blt.n	80037ca <_malloc_r+0x1a>
 80037c6:	42a9      	cmp	r1, r5
 80037c8:	d903      	bls.n	80037d2 <_malloc_r+0x22>
 80037ca:	230c      	movs	r3, #12
 80037cc:	6033      	str	r3, [r6, #0]
 80037ce:	2000      	movs	r0, #0
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
 80037d2:	f000 fd6b 	bl	80042ac <__malloc_lock>
 80037d6:	4a21      	ldr	r2, [pc, #132]	; (800385c <_malloc_r+0xac>)
 80037d8:	6814      	ldr	r4, [r2, #0]
 80037da:	4621      	mov	r1, r4
 80037dc:	b991      	cbnz	r1, 8003804 <_malloc_r+0x54>
 80037de:	4c20      	ldr	r4, [pc, #128]	; (8003860 <_malloc_r+0xb0>)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	b91b      	cbnz	r3, 80037ec <_malloc_r+0x3c>
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 fb05 	bl	8003df4 <_sbrk_r>
 80037ea:	6020      	str	r0, [r4, #0]
 80037ec:	4629      	mov	r1, r5
 80037ee:	4630      	mov	r0, r6
 80037f0:	f000 fb00 	bl	8003df4 <_sbrk_r>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d124      	bne.n	8003842 <_malloc_r+0x92>
 80037f8:	230c      	movs	r3, #12
 80037fa:	6033      	str	r3, [r6, #0]
 80037fc:	4630      	mov	r0, r6
 80037fe:	f000 fd56 	bl	80042ae <__malloc_unlock>
 8003802:	e7e4      	b.n	80037ce <_malloc_r+0x1e>
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	1b5b      	subs	r3, r3, r5
 8003808:	d418      	bmi.n	800383c <_malloc_r+0x8c>
 800380a:	2b0b      	cmp	r3, #11
 800380c:	d90f      	bls.n	800382e <_malloc_r+0x7e>
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	50cd      	str	r5, [r1, r3]
 8003812:	18cc      	adds	r4, r1, r3
 8003814:	4630      	mov	r0, r6
 8003816:	f000 fd4a 	bl	80042ae <__malloc_unlock>
 800381a:	f104 000b 	add.w	r0, r4, #11
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	f020 0007 	bic.w	r0, r0, #7
 8003824:	1ac3      	subs	r3, r0, r3
 8003826:	d0d3      	beq.n	80037d0 <_malloc_r+0x20>
 8003828:	425a      	negs	r2, r3
 800382a:	50e2      	str	r2, [r4, r3]
 800382c:	e7d0      	b.n	80037d0 <_malloc_r+0x20>
 800382e:	428c      	cmp	r4, r1
 8003830:	684b      	ldr	r3, [r1, #4]
 8003832:	bf16      	itet	ne
 8003834:	6063      	strne	r3, [r4, #4]
 8003836:	6013      	streq	r3, [r2, #0]
 8003838:	460c      	movne	r4, r1
 800383a:	e7eb      	b.n	8003814 <_malloc_r+0x64>
 800383c:	460c      	mov	r4, r1
 800383e:	6849      	ldr	r1, [r1, #4]
 8003840:	e7cc      	b.n	80037dc <_malloc_r+0x2c>
 8003842:	1cc4      	adds	r4, r0, #3
 8003844:	f024 0403 	bic.w	r4, r4, #3
 8003848:	42a0      	cmp	r0, r4
 800384a:	d005      	beq.n	8003858 <_malloc_r+0xa8>
 800384c:	1a21      	subs	r1, r4, r0
 800384e:	4630      	mov	r0, r6
 8003850:	f000 fad0 	bl	8003df4 <_sbrk_r>
 8003854:	3001      	adds	r0, #1
 8003856:	d0cf      	beq.n	80037f8 <_malloc_r+0x48>
 8003858:	6025      	str	r5, [r4, #0]
 800385a:	e7db      	b.n	8003814 <_malloc_r+0x64>
 800385c:	200004a8 	.word	0x200004a8
 8003860:	200004ac 	.word	0x200004ac

08003864 <__sfputc_r>:
 8003864:	6893      	ldr	r3, [r2, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	b410      	push	{r4}
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	da08      	bge.n	8003882 <__sfputc_r+0x1e>
 8003870:	6994      	ldr	r4, [r2, #24]
 8003872:	42a3      	cmp	r3, r4
 8003874:	db01      	blt.n	800387a <__sfputc_r+0x16>
 8003876:	290a      	cmp	r1, #10
 8003878:	d103      	bne.n	8003882 <__sfputc_r+0x1e>
 800387a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800387e:	f000 bb0d 	b.w	8003e9c <__swbuf_r>
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	1c58      	adds	r0, r3, #1
 8003886:	6010      	str	r0, [r2, #0]
 8003888:	7019      	strb	r1, [r3, #0]
 800388a:	4608      	mov	r0, r1
 800388c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003890:	4770      	bx	lr

08003892 <__sfputs_r>:
 8003892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4614      	mov	r4, r2
 800389a:	18d5      	adds	r5, r2, r3
 800389c:	42ac      	cmp	r4, r5
 800389e:	d101      	bne.n	80038a4 <__sfputs_r+0x12>
 80038a0:	2000      	movs	r0, #0
 80038a2:	e007      	b.n	80038b4 <__sfputs_r+0x22>
 80038a4:	463a      	mov	r2, r7
 80038a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ffda 	bl	8003864 <__sfputc_r>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d1f3      	bne.n	800389c <__sfputs_r+0xa>
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038b8 <_vfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	b09d      	sub	sp, #116	; 0x74
 80038c0:	4617      	mov	r7, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4606      	mov	r6, r0
 80038c6:	b118      	cbz	r0, 80038d0 <_vfiprintf_r+0x18>
 80038c8:	6983      	ldr	r3, [r0, #24]
 80038ca:	b90b      	cbnz	r3, 80038d0 <_vfiprintf_r+0x18>
 80038cc:	f7ff fee6 	bl	800369c <__sinit>
 80038d0:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <_vfiprintf_r+0x20c>)
 80038d2:	429c      	cmp	r4, r3
 80038d4:	d158      	bne.n	8003988 <_vfiprintf_r+0xd0>
 80038d6:	6874      	ldr	r4, [r6, #4]
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	0718      	lsls	r0, r3, #28
 80038dc:	d55e      	bpl.n	800399c <_vfiprintf_r+0xe4>
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <_vfiprintf_r+0xe4>
 80038e4:	2300      	movs	r3, #0
 80038e6:	9309      	str	r3, [sp, #36]	; 0x24
 80038e8:	2320      	movs	r3, #32
 80038ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ee:	2330      	movs	r3, #48	; 0x30
 80038f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f4:	9503      	str	r5, [sp, #12]
 80038f6:	f04f 0b01 	mov.w	fp, #1
 80038fa:	46b8      	mov	r8, r7
 80038fc:	4645      	mov	r5, r8
 80038fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003902:	b10b      	cbz	r3, 8003908 <_vfiprintf_r+0x50>
 8003904:	2b25      	cmp	r3, #37	; 0x25
 8003906:	d154      	bne.n	80039b2 <_vfiprintf_r+0xfa>
 8003908:	ebb8 0a07 	subs.w	sl, r8, r7
 800390c:	d00b      	beq.n	8003926 <_vfiprintf_r+0x6e>
 800390e:	4653      	mov	r3, sl
 8003910:	463a      	mov	r2, r7
 8003912:	4621      	mov	r1, r4
 8003914:	4630      	mov	r0, r6
 8003916:	f7ff ffbc 	bl	8003892 <__sfputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	f000 80c2 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003922:	4453      	add	r3, sl
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	f898 3000 	ldrb.w	r3, [r8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80ba 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003930:	2300      	movs	r3, #0
 8003932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	9307      	str	r3, [sp, #28]
 800393e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003942:	931a      	str	r3, [sp, #104]	; 0x68
 8003944:	46a8      	mov	r8, r5
 8003946:	2205      	movs	r2, #5
 8003948:	f818 1b01 	ldrb.w	r1, [r8], #1
 800394c:	485e      	ldr	r0, [pc, #376]	; (8003ac8 <_vfiprintf_r+0x210>)
 800394e:	f7fc fc3f 	bl	80001d0 <memchr>
 8003952:	9b04      	ldr	r3, [sp, #16]
 8003954:	bb78      	cbnz	r0, 80039b6 <_vfiprintf_r+0xfe>
 8003956:	06d9      	lsls	r1, r3, #27
 8003958:	bf44      	itt	mi
 800395a:	2220      	movmi	r2, #32
 800395c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003960:	071a      	lsls	r2, r3, #28
 8003962:	bf44      	itt	mi
 8003964:	222b      	movmi	r2, #43	; 0x2b
 8003966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800396a:	782a      	ldrb	r2, [r5, #0]
 800396c:	2a2a      	cmp	r2, #42	; 0x2a
 800396e:	d02a      	beq.n	80039c6 <_vfiprintf_r+0x10e>
 8003970:	9a07      	ldr	r2, [sp, #28]
 8003972:	46a8      	mov	r8, r5
 8003974:	2000      	movs	r0, #0
 8003976:	250a      	movs	r5, #10
 8003978:	4641      	mov	r1, r8
 800397a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397e:	3b30      	subs	r3, #48	; 0x30
 8003980:	2b09      	cmp	r3, #9
 8003982:	d969      	bls.n	8003a58 <_vfiprintf_r+0x1a0>
 8003984:	b360      	cbz	r0, 80039e0 <_vfiprintf_r+0x128>
 8003986:	e024      	b.n	80039d2 <_vfiprintf_r+0x11a>
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <_vfiprintf_r+0x214>)
 800398a:	429c      	cmp	r4, r3
 800398c:	d101      	bne.n	8003992 <_vfiprintf_r+0xda>
 800398e:	68b4      	ldr	r4, [r6, #8]
 8003990:	e7a2      	b.n	80038d8 <_vfiprintf_r+0x20>
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <_vfiprintf_r+0x218>)
 8003994:	429c      	cmp	r4, r3
 8003996:	bf08      	it	eq
 8003998:	68f4      	ldreq	r4, [r6, #12]
 800399a:	e79d      	b.n	80038d8 <_vfiprintf_r+0x20>
 800399c:	4621      	mov	r1, r4
 800399e:	4630      	mov	r0, r6
 80039a0:	f000 fae0 	bl	8003f64 <__swsetup_r>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d09d      	beq.n	80038e4 <_vfiprintf_r+0x2c>
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ac:	b01d      	add	sp, #116	; 0x74
 80039ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b2:	46a8      	mov	r8, r5
 80039b4:	e7a2      	b.n	80038fc <_vfiprintf_r+0x44>
 80039b6:	4a44      	ldr	r2, [pc, #272]	; (8003ac8 <_vfiprintf_r+0x210>)
 80039b8:	1a80      	subs	r0, r0, r2
 80039ba:	fa0b f000 	lsl.w	r0, fp, r0
 80039be:	4318      	orrs	r0, r3
 80039c0:	9004      	str	r0, [sp, #16]
 80039c2:	4645      	mov	r5, r8
 80039c4:	e7be      	b.n	8003944 <_vfiprintf_r+0x8c>
 80039c6:	9a03      	ldr	r2, [sp, #12]
 80039c8:	1d11      	adds	r1, r2, #4
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	9103      	str	r1, [sp, #12]
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	db01      	blt.n	80039d6 <_vfiprintf_r+0x11e>
 80039d2:	9207      	str	r2, [sp, #28]
 80039d4:	e004      	b.n	80039e0 <_vfiprintf_r+0x128>
 80039d6:	4252      	negs	r2, r2
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	9207      	str	r2, [sp, #28]
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	f898 3000 	ldrb.w	r3, [r8]
 80039e4:	2b2e      	cmp	r3, #46	; 0x2e
 80039e6:	d10e      	bne.n	8003a06 <_vfiprintf_r+0x14e>
 80039e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039ec:	2b2a      	cmp	r3, #42	; 0x2a
 80039ee:	d138      	bne.n	8003a62 <_vfiprintf_r+0x1aa>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	9203      	str	r2, [sp, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bfb8      	it	lt
 80039fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a00:	f108 0802 	add.w	r8, r8, #2
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	4d33      	ldr	r5, [pc, #204]	; (8003ad4 <_vfiprintf_r+0x21c>)
 8003a08:	f898 1000 	ldrb.w	r1, [r8]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f7fc fbde 	bl	80001d0 <memchr>
 8003a14:	b140      	cbz	r0, 8003a28 <_vfiprintf_r+0x170>
 8003a16:	2340      	movs	r3, #64	; 0x40
 8003a18:	1b40      	subs	r0, r0, r5
 8003a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	4303      	orrs	r3, r0
 8003a22:	f108 0801 	add.w	r8, r8, #1
 8003a26:	9304      	str	r3, [sp, #16]
 8003a28:	f898 1000 	ldrb.w	r1, [r8]
 8003a2c:	482a      	ldr	r0, [pc, #168]	; (8003ad8 <_vfiprintf_r+0x220>)
 8003a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a32:	2206      	movs	r2, #6
 8003a34:	f108 0701 	add.w	r7, r8, #1
 8003a38:	f7fc fbca 	bl	80001d0 <memchr>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d037      	beq.n	8003ab0 <_vfiprintf_r+0x1f8>
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <_vfiprintf_r+0x224>)
 8003a42:	bb1b      	cbnz	r3, 8003a8c <_vfiprintf_r+0x1d4>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	3307      	adds	r3, #7
 8003a48:	f023 0307 	bic.w	r3, r3, #7
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a52:	444b      	add	r3, r9
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	e750      	b.n	80038fa <_vfiprintf_r+0x42>
 8003a58:	fb05 3202 	mla	r2, r5, r2, r3
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	4688      	mov	r8, r1
 8003a60:	e78a      	b.n	8003978 <_vfiprintf_r+0xc0>
 8003a62:	2300      	movs	r3, #0
 8003a64:	f108 0801 	add.w	r8, r8, #1
 8003a68:	9305      	str	r3, [sp, #20]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	250a      	movs	r5, #10
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a74:	3a30      	subs	r2, #48	; 0x30
 8003a76:	2a09      	cmp	r2, #9
 8003a78:	d903      	bls.n	8003a82 <_vfiprintf_r+0x1ca>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c3      	beq.n	8003a06 <_vfiprintf_r+0x14e>
 8003a7e:	9105      	str	r1, [sp, #20]
 8003a80:	e7c1      	b.n	8003a06 <_vfiprintf_r+0x14e>
 8003a82:	fb05 2101 	mla	r1, r5, r1, r2
 8003a86:	2301      	movs	r3, #1
 8003a88:	4680      	mov	r8, r0
 8003a8a:	e7f0      	b.n	8003a6e <_vfiprintf_r+0x1b6>
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4622      	mov	r2, r4
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_vfiprintf_r+0x228>)
 8003a94:	a904      	add	r1, sp, #16
 8003a96:	4630      	mov	r0, r6
 8003a98:	f3af 8000 	nop.w
 8003a9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003aa0:	4681      	mov	r9, r0
 8003aa2:	d1d5      	bne.n	8003a50 <_vfiprintf_r+0x198>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	065b      	lsls	r3, r3, #25
 8003aa8:	f53f af7e 	bmi.w	80039a8 <_vfiprintf_r+0xf0>
 8003aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aae:	e77d      	b.n	80039ac <_vfiprintf_r+0xf4>
 8003ab0:	ab03      	add	r3, sp, #12
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <_vfiprintf_r+0x228>)
 8003ab8:	a904      	add	r1, sp, #16
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f888 	bl	8003bd0 <_printf_i>
 8003ac0:	e7ec      	b.n	8003a9c <_vfiprintf_r+0x1e4>
 8003ac2:	bf00      	nop
 8003ac4:	08004bc0 	.word	0x08004bc0
 8003ac8:	08004c00 	.word	0x08004c00
 8003acc:	08004be0 	.word	0x08004be0
 8003ad0:	08004ba0 	.word	0x08004ba0
 8003ad4:	08004c06 	.word	0x08004c06
 8003ad8:	08004c0a 	.word	0x08004c0a
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	08003893 	.word	0x08003893

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4691      	mov	r9, r2
 8003aea:	461f      	mov	r7, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfb8      	it	lt
 8003af8:	4613      	movlt	r3, r2
 8003afa:	f8c9 3000 	str.w	r3, [r9]
 8003afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b02:	4606      	mov	r6, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	b112      	cbz	r2, 8003b0e <_printf_common+0x2a>
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c9 3000 	str.w	r3, [r9]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b18:	3302      	addmi	r3, #2
 8003b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	f015 0506 	ands.w	r5, r5, #6
 8003b24:	d107      	bne.n	8003b36 <_printf_common+0x52>
 8003b26:	f104 0a19 	add.w	sl, r4, #25
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	dc28      	bgt.n	8003b88 <_printf_common+0xa4>
 8003b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	3300      	adds	r3, #0
 8003b3e:	bf18      	it	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	0692      	lsls	r2, r2, #26
 8003b44:	d42d      	bmi.n	8003ba2 <_printf_common+0xbe>
 8003b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4a:	4639      	mov	r1, r7
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	47c0      	blx	r8
 8003b50:	3001      	adds	r0, #1
 8003b52:	d020      	beq.n	8003b96 <_printf_common+0xb2>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	68e5      	ldr	r5, [r4, #12]
 8003b58:	f8d9 2000 	ldr.w	r2, [r9]
 8003b5c:	f003 0306 	and.w	r3, r3, #6
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	bf08      	it	eq
 8003b64:	1aad      	subeq	r5, r5, r2
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	6922      	ldr	r2, [r4, #16]
 8003b6a:	bf0c      	ite	eq
 8003b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b70:	2500      	movne	r5, #0
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bfc4      	itt	gt
 8003b76:	1a9b      	subgt	r3, r3, r2
 8003b78:	18ed      	addgt	r5, r5, r3
 8003b7a:	f04f 0900 	mov.w	r9, #0
 8003b7e:	341a      	adds	r4, #26
 8003b80:	454d      	cmp	r5, r9
 8003b82:	d11a      	bne.n	8003bba <_printf_common+0xd6>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e008      	b.n	8003b9a <_printf_common+0xb6>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4652      	mov	r2, sl
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	4630      	mov	r0, r6
 8003b90:	47c0      	blx	r8
 8003b92:	3001      	adds	r0, #1
 8003b94:	d103      	bne.n	8003b9e <_printf_common+0xba>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	e7c3      	b.n	8003b2a <_printf_common+0x46>
 8003ba2:	18e1      	adds	r1, r4, r3
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	2030      	movs	r0, #48	; 0x30
 8003ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bac:	4422      	add	r2, r4
 8003bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	e7c5      	b.n	8003b46 <_printf_common+0x62>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4639      	mov	r1, r7
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	47c0      	blx	r8
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d0e6      	beq.n	8003b96 <_printf_common+0xb2>
 8003bc8:	f109 0901 	add.w	r9, r9, #1
 8003bcc:	e7d8      	b.n	8003b80 <_printf_common+0x9c>
	...

08003bd0 <_printf_i>:
 8003bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bd8:	460c      	mov	r4, r1
 8003bda:	7e09      	ldrb	r1, [r1, #24]
 8003bdc:	b085      	sub	sp, #20
 8003bde:	296e      	cmp	r1, #110	; 0x6e
 8003be0:	4617      	mov	r7, r2
 8003be2:	4606      	mov	r6, r0
 8003be4:	4698      	mov	r8, r3
 8003be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003be8:	f000 80b3 	beq.w	8003d52 <_printf_i+0x182>
 8003bec:	d822      	bhi.n	8003c34 <_printf_i+0x64>
 8003bee:	2963      	cmp	r1, #99	; 0x63
 8003bf0:	d036      	beq.n	8003c60 <_printf_i+0x90>
 8003bf2:	d80a      	bhi.n	8003c0a <_printf_i+0x3a>
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	f000 80b9 	beq.w	8003d6c <_printf_i+0x19c>
 8003bfa:	2958      	cmp	r1, #88	; 0x58
 8003bfc:	f000 8083 	beq.w	8003d06 <_printf_i+0x136>
 8003c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c08:	e032      	b.n	8003c70 <_printf_i+0xa0>
 8003c0a:	2964      	cmp	r1, #100	; 0x64
 8003c0c:	d001      	beq.n	8003c12 <_printf_i+0x42>
 8003c0e:	2969      	cmp	r1, #105	; 0x69
 8003c10:	d1f6      	bne.n	8003c00 <_printf_i+0x30>
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	0605      	lsls	r5, r0, #24
 8003c18:	f103 0104 	add.w	r1, r3, #4
 8003c1c:	d52a      	bpl.n	8003c74 <_printf_i+0xa4>
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da03      	bge.n	8003c2e <_printf_i+0x5e>
 8003c26:	222d      	movs	r2, #45	; 0x2d
 8003c28:	425b      	negs	r3, r3
 8003c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c2e:	486f      	ldr	r0, [pc, #444]	; (8003dec <_printf_i+0x21c>)
 8003c30:	220a      	movs	r2, #10
 8003c32:	e039      	b.n	8003ca8 <_printf_i+0xd8>
 8003c34:	2973      	cmp	r1, #115	; 0x73
 8003c36:	f000 809d 	beq.w	8003d74 <_printf_i+0x1a4>
 8003c3a:	d808      	bhi.n	8003c4e <_printf_i+0x7e>
 8003c3c:	296f      	cmp	r1, #111	; 0x6f
 8003c3e:	d020      	beq.n	8003c82 <_printf_i+0xb2>
 8003c40:	2970      	cmp	r1, #112	; 0x70
 8003c42:	d1dd      	bne.n	8003c00 <_printf_i+0x30>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f043 0320 	orr.w	r3, r3, #32
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	e003      	b.n	8003c56 <_printf_i+0x86>
 8003c4e:	2975      	cmp	r1, #117	; 0x75
 8003c50:	d017      	beq.n	8003c82 <_printf_i+0xb2>
 8003c52:	2978      	cmp	r1, #120	; 0x78
 8003c54:	d1d4      	bne.n	8003c00 <_printf_i+0x30>
 8003c56:	2378      	movs	r3, #120	; 0x78
 8003c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c5c:	4864      	ldr	r0, [pc, #400]	; (8003df0 <_printf_i+0x220>)
 8003c5e:	e055      	b.n	8003d0c <_printf_i+0x13c>
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	1d19      	adds	r1, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6011      	str	r1, [r2, #0]
 8003c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c70:	2301      	movs	r3, #1
 8003c72:	e08c      	b.n	8003d8e <_printf_i+0x1be>
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6011      	str	r1, [r2, #0]
 8003c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c7c:	bf18      	it	ne
 8003c7e:	b21b      	sxthne	r3, r3
 8003c80:	e7cf      	b.n	8003c22 <_printf_i+0x52>
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	6825      	ldr	r5, [r4, #0]
 8003c86:	1d18      	adds	r0, r3, #4
 8003c88:	6010      	str	r0, [r2, #0]
 8003c8a:	0628      	lsls	r0, r5, #24
 8003c8c:	d501      	bpl.n	8003c92 <_printf_i+0xc2>
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e002      	b.n	8003c98 <_printf_i+0xc8>
 8003c92:	0668      	lsls	r0, r5, #25
 8003c94:	d5fb      	bpl.n	8003c8e <_printf_i+0xbe>
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	4854      	ldr	r0, [pc, #336]	; (8003dec <_printf_i+0x21c>)
 8003c9a:	296f      	cmp	r1, #111	; 0x6f
 8003c9c:	bf14      	ite	ne
 8003c9e:	220a      	movne	r2, #10
 8003ca0:	2208      	moveq	r2, #8
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ca8:	6865      	ldr	r5, [r4, #4]
 8003caa:	60a5      	str	r5, [r4, #8]
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	f2c0 8095 	blt.w	8003ddc <_printf_i+0x20c>
 8003cb2:	6821      	ldr	r1, [r4, #0]
 8003cb4:	f021 0104 	bic.w	r1, r1, #4
 8003cb8:	6021      	str	r1, [r4, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d13d      	bne.n	8003d3a <_printf_i+0x16a>
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	f040 808e 	bne.w	8003de0 <_printf_i+0x210>
 8003cc4:	4665      	mov	r5, ip
 8003cc6:	2a08      	cmp	r2, #8
 8003cc8:	d10b      	bne.n	8003ce2 <_printf_i+0x112>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	07db      	lsls	r3, r3, #31
 8003cce:	d508      	bpl.n	8003ce2 <_printf_i+0x112>
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	6862      	ldr	r2, [r4, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	bfde      	ittt	le
 8003cd8:	2330      	movle	r3, #48	; 0x30
 8003cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ce2:	ebac 0305 	sub.w	r3, ip, r5
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	f8cd 8000 	str.w	r8, [sp]
 8003cec:	463b      	mov	r3, r7
 8003cee:	aa03      	add	r2, sp, #12
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff fef6 	bl	8003ae4 <_printf_common>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d14d      	bne.n	8003d98 <_printf_i+0x1c8>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d00:	b005      	add	sp, #20
 8003d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d06:	4839      	ldr	r0, [pc, #228]	; (8003dec <_printf_i+0x21c>)
 8003d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	1d1d      	adds	r5, r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6015      	str	r5, [r2, #0]
 8003d16:	060a      	lsls	r2, r1, #24
 8003d18:	d50b      	bpl.n	8003d32 <_printf_i+0x162>
 8003d1a:	07ca      	lsls	r2, r1, #31
 8003d1c:	bf44      	itt	mi
 8003d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8003d22:	6021      	strmi	r1, [r4, #0]
 8003d24:	b91b      	cbnz	r3, 8003d2e <_printf_i+0x15e>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	f022 0220 	bic.w	r2, r2, #32
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	e7b7      	b.n	8003ca2 <_printf_i+0xd2>
 8003d32:	064d      	lsls	r5, r1, #25
 8003d34:	bf48      	it	mi
 8003d36:	b29b      	uxthmi	r3, r3
 8003d38:	e7ef      	b.n	8003d1a <_printf_i+0x14a>
 8003d3a:	4665      	mov	r5, ip
 8003d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d40:	fb02 3311 	mls	r3, r2, r1, r3
 8003d44:	5cc3      	ldrb	r3, [r0, r3]
 8003d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d1f5      	bne.n	8003d3c <_printf_i+0x16c>
 8003d50:	e7b9      	b.n	8003cc6 <_printf_i+0xf6>
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	6825      	ldr	r5, [r4, #0]
 8003d56:	6961      	ldr	r1, [r4, #20]
 8003d58:	1d18      	adds	r0, r3, #4
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	0628      	lsls	r0, r5, #24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	d501      	bpl.n	8003d66 <_printf_i+0x196>
 8003d62:	6019      	str	r1, [r3, #0]
 8003d64:	e002      	b.n	8003d6c <_printf_i+0x19c>
 8003d66:	066a      	lsls	r2, r5, #25
 8003d68:	d5fb      	bpl.n	8003d62 <_printf_i+0x192>
 8003d6a:	8019      	strh	r1, [r3, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6123      	str	r3, [r4, #16]
 8003d70:	4665      	mov	r5, ip
 8003d72:	e7b9      	b.n	8003ce8 <_printf_i+0x118>
 8003d74:	6813      	ldr	r3, [r2, #0]
 8003d76:	1d19      	adds	r1, r3, #4
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	681d      	ldr	r5, [r3, #0]
 8003d7c:	6862      	ldr	r2, [r4, #4]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4628      	mov	r0, r5
 8003d82:	f7fc fa25 	bl	80001d0 <memchr>
 8003d86:	b108      	cbz	r0, 8003d8c <_printf_i+0x1bc>
 8003d88:	1b40      	subs	r0, r0, r5
 8003d8a:	6060      	str	r0, [r4, #4]
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	2300      	movs	r3, #0
 8003d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d96:	e7a7      	b.n	8003ce8 <_printf_i+0x118>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	462a      	mov	r2, r5
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	4630      	mov	r0, r6
 8003da0:	47c0      	blx	r8
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0aa      	beq.n	8003cfc <_printf_i+0x12c>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	079b      	lsls	r3, r3, #30
 8003daa:	d413      	bmi.n	8003dd4 <_printf_i+0x204>
 8003dac:	68e0      	ldr	r0, [r4, #12]
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	bfb8      	it	lt
 8003db4:	4618      	movlt	r0, r3
 8003db6:	e7a3      	b.n	8003d00 <_printf_i+0x130>
 8003db8:	2301      	movs	r3, #1
 8003dba:	464a      	mov	r2, r9
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	47c0      	blx	r8
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d09a      	beq.n	8003cfc <_printf_i+0x12c>
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	9a03      	ldr	r2, [sp, #12]
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	42ab      	cmp	r3, r5
 8003dd0:	dcf2      	bgt.n	8003db8 <_printf_i+0x1e8>
 8003dd2:	e7eb      	b.n	8003dac <_printf_i+0x1dc>
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	f104 0919 	add.w	r9, r4, #25
 8003dda:	e7f5      	b.n	8003dc8 <_printf_i+0x1f8>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ac      	bne.n	8003d3a <_printf_i+0x16a>
 8003de0:	7803      	ldrb	r3, [r0, #0]
 8003de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dea:	e76c      	b.n	8003cc6 <_printf_i+0xf6>
 8003dec:	08004c11 	.word	0x08004c11
 8003df0:	08004c22 	.word	0x08004c22

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4c06      	ldr	r4, [pc, #24]	; (8003e10 <_sbrk_r+0x1c>)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	f7fd ffde 	bl	8001dc0 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000518 	.word	0x20000518

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 fa96 	bl	800434c <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	4605      	mov	r5, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 f9b6 	bl	80041c0 <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	4628      	mov	r0, r5
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b869 	b.w	8003f40 <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f9a3 	bl	80041c0 <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b8d3 	b.w	8004040 <_close_r>
	...

08003e9c <__swbuf_r>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	460e      	mov	r6, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	b118      	cbz	r0, 8003eae <__swbuf_r+0x12>
 8003ea6:	6983      	ldr	r3, [r0, #24]
 8003ea8:	b90b      	cbnz	r3, 8003eae <__swbuf_r+0x12>
 8003eaa:	f7ff fbf7 	bl	800369c <__sinit>
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <__swbuf_r+0x98>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d12a      	bne.n	8003f0a <__swbuf_r+0x6e>
 8003eb4:	686c      	ldr	r4, [r5, #4]
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	071a      	lsls	r2, r3, #28
 8003ebe:	d52e      	bpl.n	8003f1e <__swbuf_r+0x82>
 8003ec0:	6923      	ldr	r3, [r4, #16]
 8003ec2:	b363      	cbz	r3, 8003f1e <__swbuf_r+0x82>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1ac0      	subs	r0, r0, r3
 8003eca:	6963      	ldr	r3, [r4, #20]
 8003ecc:	b2f6      	uxtb	r6, r6
 8003ece:	4283      	cmp	r3, r0
 8003ed0:	4637      	mov	r7, r6
 8003ed2:	dc04      	bgt.n	8003ede <__swbuf_r+0x42>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f948 	bl	800416c <_fflush_r>
 8003edc:	bb28      	cbnz	r0, 8003f2a <__swbuf_r+0x8e>
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	701e      	strb	r6, [r3, #0]
 8003eec:	6963      	ldr	r3, [r4, #20]
 8003eee:	3001      	adds	r0, #1
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	d004      	beq.n	8003efe <__swbuf_r+0x62>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	07db      	lsls	r3, r3, #31
 8003ef8:	d519      	bpl.n	8003f2e <__swbuf_r+0x92>
 8003efa:	2e0a      	cmp	r6, #10
 8003efc:	d117      	bne.n	8003f2e <__swbuf_r+0x92>
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f933 	bl	800416c <_fflush_r>
 8003f06:	b190      	cbz	r0, 8003f2e <__swbuf_r+0x92>
 8003f08:	e00f      	b.n	8003f2a <__swbuf_r+0x8e>
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <__swbuf_r+0x9c>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d101      	bne.n	8003f14 <__swbuf_r+0x78>
 8003f10:	68ac      	ldr	r4, [r5, #8]
 8003f12:	e7d0      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <__swbuf_r+0xa0>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	bf08      	it	eq
 8003f1a:	68ec      	ldreq	r4, [r5, #12]
 8003f1c:	e7cb      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 f81f 	bl	8003f64 <__swsetup_r>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0cc      	beq.n	8003ec4 <__swbuf_r+0x28>
 8003f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f2e:	4638      	mov	r0, r7
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004bc0 	.word	0x08004bc0
 8003f38:	08004be0 	.word	0x08004be0
 8003f3c:	08004ba0 	.word	0x08004ba0

08003f40 <_write_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4c07      	ldr	r4, [pc, #28]	; (8003f60 <_write_r+0x20>)
 8003f44:	4605      	mov	r5, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fd fee5 	bl	8001d1e <_write>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_write_r+0x1e>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_write_r+0x1e>
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000518 	.word	0x20000518

08003f64 <__swsetup_r>:
 8003f64:	4b32      	ldr	r3, [pc, #200]	; (8004030 <__swsetup_r+0xcc>)
 8003f66:	b570      	push	{r4, r5, r6, lr}
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	b125      	cbz	r5, 8003f7a <__swsetup_r+0x16>
 8003f70:	69ab      	ldr	r3, [r5, #24]
 8003f72:	b913      	cbnz	r3, 8003f7a <__swsetup_r+0x16>
 8003f74:	4628      	mov	r0, r5
 8003f76:	f7ff fb91 	bl	800369c <__sinit>
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <__swsetup_r+0xd0>)
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	d10f      	bne.n	8003fa0 <__swsetup_r+0x3c>
 8003f80:	686c      	ldr	r4, [r5, #4]
 8003f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	0715      	lsls	r5, r2, #28
 8003f8a:	d42c      	bmi.n	8003fe6 <__swsetup_r+0x82>
 8003f8c:	06d0      	lsls	r0, r2, #27
 8003f8e:	d411      	bmi.n	8003fb4 <__swsetup_r+0x50>
 8003f90:	2209      	movs	r2, #9
 8003f92:	6032      	str	r2, [r6, #0]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9e:	e03e      	b.n	800401e <__swsetup_r+0xba>
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <__swsetup_r+0xd4>)
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d101      	bne.n	8003faa <__swsetup_r+0x46>
 8003fa6:	68ac      	ldr	r4, [r5, #8]
 8003fa8:	e7eb      	b.n	8003f82 <__swsetup_r+0x1e>
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <__swsetup_r+0xd8>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	bf08      	it	eq
 8003fb0:	68ec      	ldreq	r4, [r5, #12]
 8003fb2:	e7e6      	b.n	8003f82 <__swsetup_r+0x1e>
 8003fb4:	0751      	lsls	r1, r2, #29
 8003fb6:	d512      	bpl.n	8003fde <__swsetup_r+0x7a>
 8003fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fba:	b141      	cbz	r1, 8003fce <__swsetup_r+0x6a>
 8003fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	d002      	beq.n	8003fca <__swsetup_r+0x66>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f973 	bl	80042b0 <_free_r>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f043 0308 	orr.w	r3, r3, #8
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b94b      	cbnz	r3, 8003ffe <__swsetup_r+0x9a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d003      	beq.n	8003ffe <__swsetup_r+0x9a>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f917 	bl	800422c <__smakebuf_r>
 8003ffe:	89a2      	ldrh	r2, [r4, #12]
 8004000:	f012 0301 	ands.w	r3, r2, #1
 8004004:	d00c      	beq.n	8004020 <__swsetup_r+0xbc>
 8004006:	2300      	movs	r3, #0
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	425b      	negs	r3, r3
 800400e:	61a3      	str	r3, [r4, #24]
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	b953      	cbnz	r3, 800402a <__swsetup_r+0xc6>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800401c:	d1ba      	bne.n	8003f94 <__swsetup_r+0x30>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	0792      	lsls	r2, r2, #30
 8004022:	bf58      	it	pl
 8004024:	6963      	ldrpl	r3, [r4, #20]
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	e7f2      	b.n	8004010 <__swsetup_r+0xac>
 800402a:	2000      	movs	r0, #0
 800402c:	e7f7      	b.n	800401e <__swsetup_r+0xba>
 800402e:	bf00      	nop
 8004030:	20000014 	.word	0x20000014
 8004034:	08004bc0 	.word	0x08004bc0
 8004038:	08004be0 	.word	0x08004be0
 800403c:	08004ba0 	.word	0x08004ba0

08004040 <_close_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4c06      	ldr	r4, [pc, #24]	; (800405c <_close_r+0x1c>)
 8004044:	2300      	movs	r3, #0
 8004046:	4605      	mov	r5, r0
 8004048:	4608      	mov	r0, r1
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	f7fd fe83 	bl	8001d56 <_close>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_close_r+0x1a>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	b103      	cbz	r3, 800405a <_close_r+0x1a>
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	20000518 	.word	0x20000518

08004060 <__sflush_r>:
 8004060:	898a      	ldrh	r2, [r1, #12]
 8004062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	0710      	lsls	r0, r2, #28
 800406a:	460c      	mov	r4, r1
 800406c:	d458      	bmi.n	8004120 <__sflush_r+0xc0>
 800406e:	684b      	ldr	r3, [r1, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	dc05      	bgt.n	8004080 <__sflush_r+0x20>
 8004074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	dc02      	bgt.n	8004080 <__sflush_r+0x20>
 800407a:	2000      	movs	r0, #0
 800407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004082:	2e00      	cmp	r6, #0
 8004084:	d0f9      	beq.n	800407a <__sflush_r+0x1a>
 8004086:	2300      	movs	r3, #0
 8004088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800408c:	682f      	ldr	r7, [r5, #0]
 800408e:	6a21      	ldr	r1, [r4, #32]
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	d032      	beq.n	80040fa <__sflush_r+0x9a>
 8004094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	075a      	lsls	r2, r3, #29
 800409a:	d505      	bpl.n	80040a8 <__sflush_r+0x48>
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	1ac0      	subs	r0, r0, r3
 80040a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040a2:	b10b      	cbz	r3, 80040a8 <__sflush_r+0x48>
 80040a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a6:	1ac0      	subs	r0, r0, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	4602      	mov	r2, r0
 80040ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ae:	6a21      	ldr	r1, [r4, #32]
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b0      	blx	r6
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	d106      	bne.n	80040c8 <__sflush_r+0x68>
 80040ba:	6829      	ldr	r1, [r5, #0]
 80040bc:	291d      	cmp	r1, #29
 80040be:	d848      	bhi.n	8004152 <__sflush_r+0xf2>
 80040c0:	4a29      	ldr	r2, [pc, #164]	; (8004168 <__sflush_r+0x108>)
 80040c2:	40ca      	lsrs	r2, r1
 80040c4:	07d6      	lsls	r6, r2, #31
 80040c6:	d544      	bpl.n	8004152 <__sflush_r+0xf2>
 80040c8:	2200      	movs	r2, #0
 80040ca:	6062      	str	r2, [r4, #4]
 80040cc:	04d9      	lsls	r1, r3, #19
 80040ce:	6922      	ldr	r2, [r4, #16]
 80040d0:	6022      	str	r2, [r4, #0]
 80040d2:	d504      	bpl.n	80040de <__sflush_r+0x7e>
 80040d4:	1c42      	adds	r2, r0, #1
 80040d6:	d101      	bne.n	80040dc <__sflush_r+0x7c>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b903      	cbnz	r3, 80040de <__sflush_r+0x7e>
 80040dc:	6560      	str	r0, [r4, #84]	; 0x54
 80040de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e0:	602f      	str	r7, [r5, #0]
 80040e2:	2900      	cmp	r1, #0
 80040e4:	d0c9      	beq.n	800407a <__sflush_r+0x1a>
 80040e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ea:	4299      	cmp	r1, r3
 80040ec:	d002      	beq.n	80040f4 <__sflush_r+0x94>
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f8de 	bl	80042b0 <_free_r>
 80040f4:	2000      	movs	r0, #0
 80040f6:	6360      	str	r0, [r4, #52]	; 0x34
 80040f8:	e7c0      	b.n	800407c <__sflush_r+0x1c>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b0      	blx	r6
 8004100:	1c41      	adds	r1, r0, #1
 8004102:	d1c8      	bne.n	8004096 <__sflush_r+0x36>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0c5      	beq.n	8004096 <__sflush_r+0x36>
 800410a:	2b1d      	cmp	r3, #29
 800410c:	d001      	beq.n	8004112 <__sflush_r+0xb2>
 800410e:	2b16      	cmp	r3, #22
 8004110:	d101      	bne.n	8004116 <__sflush_r+0xb6>
 8004112:	602f      	str	r7, [r5, #0]
 8004114:	e7b1      	b.n	800407a <__sflush_r+0x1a>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	e7ad      	b.n	800407c <__sflush_r+0x1c>
 8004120:	690f      	ldr	r7, [r1, #16]
 8004122:	2f00      	cmp	r7, #0
 8004124:	d0a9      	beq.n	800407a <__sflush_r+0x1a>
 8004126:	0793      	lsls	r3, r2, #30
 8004128:	680e      	ldr	r6, [r1, #0]
 800412a:	bf08      	it	eq
 800412c:	694b      	ldreq	r3, [r1, #20]
 800412e:	600f      	str	r7, [r1, #0]
 8004130:	bf18      	it	ne
 8004132:	2300      	movne	r3, #0
 8004134:	eba6 0807 	sub.w	r8, r6, r7
 8004138:	608b      	str	r3, [r1, #8]
 800413a:	f1b8 0f00 	cmp.w	r8, #0
 800413e:	dd9c      	ble.n	800407a <__sflush_r+0x1a>
 8004140:	4643      	mov	r3, r8
 8004142:	463a      	mov	r2, r7
 8004144:	6a21      	ldr	r1, [r4, #32]
 8004146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004148:	4628      	mov	r0, r5
 800414a:	47b0      	blx	r6
 800414c:	2800      	cmp	r0, #0
 800414e:	dc06      	bgt.n	800415e <__sflush_r+0xfe>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800415c:	e78e      	b.n	800407c <__sflush_r+0x1c>
 800415e:	4407      	add	r7, r0
 8004160:	eba8 0800 	sub.w	r8, r8, r0
 8004164:	e7e9      	b.n	800413a <__sflush_r+0xda>
 8004166:	bf00      	nop
 8004168:	20400001 	.word	0x20400001

0800416c <_fflush_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	4605      	mov	r5, r0
 8004172:	460c      	mov	r4, r1
 8004174:	b1db      	cbz	r3, 80041ae <_fflush_r+0x42>
 8004176:	b118      	cbz	r0, 8004180 <_fflush_r+0x14>
 8004178:	6983      	ldr	r3, [r0, #24]
 800417a:	b90b      	cbnz	r3, 8004180 <_fflush_r+0x14>
 800417c:	f7ff fa8e 	bl	800369c <__sinit>
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <_fflush_r+0x48>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d109      	bne.n	800419a <_fflush_r+0x2e>
 8004186:	686c      	ldr	r4, [r5, #4]
 8004188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800418c:	b17b      	cbz	r3, 80041ae <_fflush_r+0x42>
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004196:	f7ff bf63 	b.w	8004060 <__sflush_r>
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <_fflush_r+0x4c>)
 800419c:	429c      	cmp	r4, r3
 800419e:	d101      	bne.n	80041a4 <_fflush_r+0x38>
 80041a0:	68ac      	ldr	r4, [r5, #8]
 80041a2:	e7f1      	b.n	8004188 <_fflush_r+0x1c>
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <_fflush_r+0x50>)
 80041a6:	429c      	cmp	r4, r3
 80041a8:	bf08      	it	eq
 80041aa:	68ec      	ldreq	r4, [r5, #12]
 80041ac:	e7ec      	b.n	8004188 <_fflush_r+0x1c>
 80041ae:	2000      	movs	r0, #0
 80041b0:	bd38      	pop	{r3, r4, r5, pc}
 80041b2:	bf00      	nop
 80041b4:	08004bc0 	.word	0x08004bc0
 80041b8:	08004be0 	.word	0x08004be0
 80041bc:	08004ba0 	.word	0x08004ba0

080041c0 <_lseek_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4c07      	ldr	r4, [pc, #28]	; (80041e0 <_lseek_r+0x20>)
 80041c4:	4605      	mov	r5, r0
 80041c6:	4608      	mov	r0, r1
 80041c8:	4611      	mov	r1, r2
 80041ca:	2200      	movs	r2, #0
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fd fde8 	bl	8001da4 <_lseek>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_lseek_r+0x1e>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	b103      	cbz	r3, 80041de <_lseek_r+0x1e>
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20000518 	.word	0x20000518

080041e4 <__swhatbuf_r>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	460e      	mov	r6, r1
 80041e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	b096      	sub	sp, #88	; 0x58
 80041f0:	4614      	mov	r4, r2
 80041f2:	461d      	mov	r5, r3
 80041f4:	da07      	bge.n	8004206 <__swhatbuf_r+0x22>
 80041f6:	2300      	movs	r3, #0
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	89b3      	ldrh	r3, [r6, #12]
 80041fc:	061a      	lsls	r2, r3, #24
 80041fe:	d410      	bmi.n	8004222 <__swhatbuf_r+0x3e>
 8004200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004204:	e00e      	b.n	8004224 <__swhatbuf_r+0x40>
 8004206:	466a      	mov	r2, sp
 8004208:	f000 f8b2 	bl	8004370 <_fstat_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	dbf2      	blt.n	80041f6 <__swhatbuf_r+0x12>
 8004210:	9a01      	ldr	r2, [sp, #4]
 8004212:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004216:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800421a:	425a      	negs	r2, r3
 800421c:	415a      	adcs	r2, r3
 800421e:	602a      	str	r2, [r5, #0]
 8004220:	e7ee      	b.n	8004200 <__swhatbuf_r+0x1c>
 8004222:	2340      	movs	r3, #64	; 0x40
 8004224:	2000      	movs	r0, #0
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	b016      	add	sp, #88	; 0x58
 800422a:	bd70      	pop	{r4, r5, r6, pc}

0800422c <__smakebuf_r>:
 800422c:	898b      	ldrh	r3, [r1, #12]
 800422e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004230:	079d      	lsls	r5, r3, #30
 8004232:	4606      	mov	r6, r0
 8004234:	460c      	mov	r4, r1
 8004236:	d507      	bpl.n	8004248 <__smakebuf_r+0x1c>
 8004238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	2301      	movs	r3, #1
 8004242:	6163      	str	r3, [r4, #20]
 8004244:	b002      	add	sp, #8
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	ab01      	add	r3, sp, #4
 800424a:	466a      	mov	r2, sp
 800424c:	f7ff ffca 	bl	80041e4 <__swhatbuf_r>
 8004250:	9900      	ldr	r1, [sp, #0]
 8004252:	4605      	mov	r5, r0
 8004254:	4630      	mov	r0, r6
 8004256:	f7ff faab 	bl	80037b0 <_malloc_r>
 800425a:	b948      	cbnz	r0, 8004270 <__smakebuf_r+0x44>
 800425c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004260:	059a      	lsls	r2, r3, #22
 8004262:	d4ef      	bmi.n	8004244 <__smakebuf_r+0x18>
 8004264:	f023 0303 	bic.w	r3, r3, #3
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	e7e3      	b.n	8004238 <__smakebuf_r+0xc>
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <__smakebuf_r+0x7c>)
 8004272:	62b3      	str	r3, [r6, #40]	; 0x28
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	6020      	str	r0, [r4, #0]
 8004278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	9b00      	ldr	r3, [sp, #0]
 8004280:	6163      	str	r3, [r4, #20]
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	6120      	str	r0, [r4, #16]
 8004286:	b15b      	cbz	r3, 80042a0 <__smakebuf_r+0x74>
 8004288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f881 	bl	8004394 <_isatty_r>
 8004292:	b128      	cbz	r0, 80042a0 <__smakebuf_r+0x74>
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	431d      	orrs	r5, r3
 80042a4:	81a5      	strh	r5, [r4, #12]
 80042a6:	e7cd      	b.n	8004244 <__smakebuf_r+0x18>
 80042a8:	08003665 	.word	0x08003665

080042ac <__malloc_lock>:
 80042ac:	4770      	bx	lr

080042ae <__malloc_unlock>:
 80042ae:	4770      	bx	lr

080042b0 <_free_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4605      	mov	r5, r0
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d045      	beq.n	8004344 <_free_r+0x94>
 80042b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042bc:	1f0c      	subs	r4, r1, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfb8      	it	lt
 80042c2:	18e4      	addlt	r4, r4, r3
 80042c4:	f7ff fff2 	bl	80042ac <__malloc_lock>
 80042c8:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <_free_r+0x98>)
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	4610      	mov	r0, r2
 80042ce:	b933      	cbnz	r3, 80042de <_free_r+0x2e>
 80042d0:	6063      	str	r3, [r4, #4]
 80042d2:	6014      	str	r4, [r2, #0]
 80042d4:	4628      	mov	r0, r5
 80042d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042da:	f7ff bfe8 	b.w	80042ae <__malloc_unlock>
 80042de:	42a3      	cmp	r3, r4
 80042e0:	d90c      	bls.n	80042fc <_free_r+0x4c>
 80042e2:	6821      	ldr	r1, [r4, #0]
 80042e4:	1862      	adds	r2, r4, r1
 80042e6:	4293      	cmp	r3, r2
 80042e8:	bf04      	itt	eq
 80042ea:	681a      	ldreq	r2, [r3, #0]
 80042ec:	685b      	ldreq	r3, [r3, #4]
 80042ee:	6063      	str	r3, [r4, #4]
 80042f0:	bf04      	itt	eq
 80042f2:	1852      	addeq	r2, r2, r1
 80042f4:	6022      	streq	r2, [r4, #0]
 80042f6:	6004      	str	r4, [r0, #0]
 80042f8:	e7ec      	b.n	80042d4 <_free_r+0x24>
 80042fa:	4613      	mov	r3, r2
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	b10a      	cbz	r2, 8004304 <_free_r+0x54>
 8004300:	42a2      	cmp	r2, r4
 8004302:	d9fa      	bls.n	80042fa <_free_r+0x4a>
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	1858      	adds	r0, r3, r1
 8004308:	42a0      	cmp	r0, r4
 800430a:	d10b      	bne.n	8004324 <_free_r+0x74>
 800430c:	6820      	ldr	r0, [r4, #0]
 800430e:	4401      	add	r1, r0
 8004310:	1858      	adds	r0, r3, r1
 8004312:	4282      	cmp	r2, r0
 8004314:	6019      	str	r1, [r3, #0]
 8004316:	d1dd      	bne.n	80042d4 <_free_r+0x24>
 8004318:	6810      	ldr	r0, [r2, #0]
 800431a:	6852      	ldr	r2, [r2, #4]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	4401      	add	r1, r0
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	e7d7      	b.n	80042d4 <_free_r+0x24>
 8004324:	d902      	bls.n	800432c <_free_r+0x7c>
 8004326:	230c      	movs	r3, #12
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	e7d3      	b.n	80042d4 <_free_r+0x24>
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	1821      	adds	r1, r4, r0
 8004330:	428a      	cmp	r2, r1
 8004332:	bf04      	itt	eq
 8004334:	6811      	ldreq	r1, [r2, #0]
 8004336:	6852      	ldreq	r2, [r2, #4]
 8004338:	6062      	str	r2, [r4, #4]
 800433a:	bf04      	itt	eq
 800433c:	1809      	addeq	r1, r1, r0
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	605c      	str	r4, [r3, #4]
 8004342:	e7c7      	b.n	80042d4 <_free_r+0x24>
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop
 8004348:	200004a8 	.word	0x200004a8

0800434c <_read_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4c07      	ldr	r4, [pc, #28]	; (800436c <_read_r+0x20>)
 8004350:	4605      	mov	r5, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	2200      	movs	r2, #0
 8004358:	6022      	str	r2, [r4, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fd fcc2 	bl	8001ce4 <_read>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_read_r+0x1e>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	b103      	cbz	r3, 800436a <_read_r+0x1e>
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	20000518 	.word	0x20000518

08004370 <_fstat_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4c07      	ldr	r4, [pc, #28]	; (8004390 <_fstat_r+0x20>)
 8004374:	2300      	movs	r3, #0
 8004376:	4605      	mov	r5, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	f7fd fcf6 	bl	8001d6e <_fstat>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d102      	bne.n	800438c <_fstat_r+0x1c>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	b103      	cbz	r3, 800438c <_fstat_r+0x1c>
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000518 	.word	0x20000518

08004394 <_isatty_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4c06      	ldr	r4, [pc, #24]	; (80043b0 <_isatty_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4605      	mov	r5, r0
 800439c:	4608      	mov	r0, r1
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	f7fd fcf5 	bl	8001d8e <_isatty>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_isatty_r+0x1a>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_isatty_r+0x1a>
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000518 	.word	0x20000518

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
